const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

async function resetTestData() {
  console.log("üîÑ R√©initialisation des donn√©es de test");
  console.log("======================================");

  const prisma = new PrismaClient();

  try {
    await prisma.$connect();

    // Cr√©er les disciplines
    console.log("\nüìö Cr√©ation des disciplines...");
    const disciplines = [
      { name: "Math√©matiques" },
      { name: "Fran√ßais" },
      { name: "Litt√©rature" },
      { name: "Anglais" },
      { name: "Sciences" }
    ];

    for (const discipline of disciplines) {
      await prisma.discipline.upsert({
        where: { name: discipline.name },
        update: {},
        create: discipline
      });
    }
    console.log("‚úÖ Disciplines cr√©√©es");

    // Cr√©er les utilisateurs de test
    console.log("\nüë• Cr√©ation des utilisateurs de test...");
    
    const users = [
      {
        name: "Gislain Auteur",
        email: "gislain@gmail.com",
        phone: "96005482",
        password: await bcrypt.hash('password123', 10),
        role: "AUTEUR",
        status: "APPROVED"
      },
      {
        name: "Koffi LOSSA",
        email: "koffi.concepteur@gmail.com",
        phone: "96005483",
        password: await bcrypt.hash('password123', 10),
        role: "CONCEPTEUR",
        status: "APPROVED"
      },
      {
        name: "Alphonse Concepteur",
        email: "alphonse.concepteur@gmail.com",
        phone: "96005484",
        password: await bcrypt.hash('password123', 10),
        role: "CONCEPTEUR",
        status: "APPROVED"
      },
      {
        name: "Admin PDG",
        email: "admin@lahamarchand.com",
        phone: "96005485",
        password: await bcrypt.hash('password123', 10),
        role: "PDG",
        status: "APPROVED"
      }
    ];

    const createdUsers = [];
    for (const userData of users) {
      const user = await prisma.user.upsert({
        where: { email: userData.email },
        update: {},
        create: userData
      });
      createdUsers.push(user);
    }
    console.log("‚úÖ Utilisateurs cr√©√©s");

    // Assigner des disciplines aux concepteurs
    const mathDiscipline = await prisma.discipline.findUnique({ where: { name: "Math√©matiques" } });
    const francaisDiscipline = await prisma.discipline.findUnique({ where: { name: "Fran√ßais" } });
    const litteratureDiscipline = await prisma.discipline.findUnique({ where: { name: "Litt√©rature" } });
    const anglaisDiscipline = await prisma.discipline.findUnique({ where: { name: "Anglais" } });

    const koffi = createdUsers.find(u => u.email === "koffi.concepteur@gmail.com");
    const alphonse = createdUsers.find(u => u.email === "alphonse.concepteur@gmail.com");
    const gislain = createdUsers.find(u => u.email === "gislain@gmail.com");

    if (koffi && francaisDiscipline) {
      await prisma.user.update({
        where: { id: koffi.id },
        data: { disciplineId: francaisDiscipline.id }
      });
    }

    if (alphonse && litteratureDiscipline) {
      await prisma.user.update({
        where: { id: alphonse.id },
        data: { disciplineId: litteratureDiscipline.id }
      });
    }

    if (gislain && mathDiscipline) {
      await prisma.user.update({
        where: { id: gislain.id },
        data: { disciplineId: mathDiscipline.id }
      });
    }

    // Cr√©er des projets valid√©s
    console.log("\nüìã Cr√©ation des projets valid√©s...");
    
    const projects = [
      {
        title: "Manuel de Fran√ßais",
        description: "Manuel complet de fran√ßais pour le primaire",
        objectives: "Apprentissage de la langue fran√ßaise",
        expectedDeliverables: "Manuel, exercices, corrig√©s",
        requiredResources: "√âquipe p√©dagogique, illustrations",
        timeline: "6 mois",
        status: "ACCEPTED",
        concepteurId: koffi.id,
        disciplineId: francaisDiscipline.id,
        submittedAt: new Date(),
        reviewedAt: new Date()
      },
      {
        title: "Manuel de Math√©matiques - ACCEPTED",
        description: "Manuel de math√©matiques pour CE1",
        objectives: "Apprentissage des bases math√©matiques",
        expectedDeliverables: "Manuel, cahier d'exercices",
        requiredResources: "√âquipe p√©dagogique, mat√©riel didactique",
        timeline: "4 mois",
        status: "ACCEPTED",
        concepteurId: alphonse.id,
        disciplineId: litteratureDiscipline.id,
        submittedAt: new Date(),
        reviewedAt: new Date()
      },
      {
        title: "Projet de Destruction des incomp√©tents",
        description: "Projet √©ducatif innovant",
        objectives: "Am√©lioration de la qualit√© √©ducative",
        expectedDeliverables: "Guide m√©thodologique",
        requiredResources: "√âquipe sp√©cialis√©e",
        timeline: "3 mois",
        status: "ACCEPTED",
        concepteurId: koffi.id,
        disciplineId: anglaisDiscipline.id,
        submittedAt: new Date(),
        reviewedAt: new Date()
      }
    ];

    for (const projectData of projects) {
      await prisma.project.create({
        data: projectData
      });
    }
    console.log("‚úÖ Projets valid√©s cr√©√©s");

    console.log("\nüéØ COMPTES DE TEST CR√â√âS:");
    console.log("==========================");
    console.log("üìß Auteur: gislain@gmail.com / password123");
    console.log("üìß Concepteur: koffi.concepteur@gmail.com / password123");
    console.log("üìß Concepteur: alphonse.concepteur@gmail.com / password123");
    console.log("üìß PDG: admin@lahamarchand.com / password123");

    console.log("\n‚úÖ R√âINITIALISATION TERMIN√âE !");
    console.log("==============================");
    console.log("La base de donn√©es est maintenant synchronis√©e avec le nouveau sch√©ma.");
    console.log("Les erreurs de colonnes manquantes devraient √™tre r√©solues.");

  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©initialisation:", error.message);
  } finally {
    await prisma.$disconnect();
    console.log("\nüîå D√©connexion de la base de donn√©es");
  }
}

resetTestData().catch(console.error);
