// Script pour v√©rifier les statuts d'≈ìuvres dans la base de donn√©es
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkWorkStatuses() {
  try {
    console.log("üîç V√©rification des statuts d'≈ìuvres dans la base de donn√©es");
    console.log("=" .repeat(50));

    // V√©rifier les ≈ìuvres existantes et leurs statuts
    const works = await prisma.work.findMany({
      select: {
        id: true,
        title: true,
        status: true
      }
    });

    console.log(`üìñ ≈íuvres trouv√©es: ${works.length}`);
    
    // Grouper par statut
    const statusCounts = {};
    works.forEach(work => {
      statusCounts[work.status] = (statusCounts[work.status] || 0) + 1;
    });

    console.log("\nüìä R√©partition par statut:");
    Object.entries(statusCounts).forEach(([status, count]) => {
      console.log(`- ${status}: ${count} ≈ìuvre(s)`);
    });

    // Afficher quelques exemples
    console.log("\nüìù Exemples d'≈ìuvres:");
    works.slice(0, 5).forEach(work => {
      console.log(`- ${work.title} (${work.status})`);
    });

    // Tester la cr√©ation d'une ≈ìuvre avec un statut DRAFT
    console.log("\nüß™ Test de cr√©ation d'une ≈ìuvre avec statut DRAFT:");
    try {
      const discipline = await prisma.discipline.findFirst();
      const auteur = await prisma.user.findFirst({ where: { role: 'AUTEUR' } });
      
      if (discipline && auteur) {
        const testWork = await prisma.work.create({
          data: {
            title: `Test DRAFT - ${new Date().toISOString()}`,
            isbn: `978-${Date.now().toString().slice(-8)}-${Math.floor(Math.random() * 10000).toString().padStart(4, '0')}`,
            price: 10000,
            stock: 50,
            minStock: 5,
            maxStock: 500,
            disciplineId: discipline.id,
            authorId: auteur.id,
            status: 'DRAFT'
          }
        });
        
        console.log("‚úÖ ≈íuvre DRAFT cr√©√©e avec succ√®s:", {
          id: testWork.id,
          title: testWork.title,
          status: testWork.status
        });
        
        // Supprimer l'≈ìuvre de test
        await prisma.work.delete({ where: { id: testWork.id } });
        console.log("üóëÔ∏è ≈íuvre de test supprim√©e");
      }
    } catch (error) {
      console.error("‚ùå Erreur lors du test de cr√©ation DRAFT:", error.message);
    }

  } catch (error) {
    console.error("‚ùå Erreur lors de la v√©rification:", error);
  } finally {
    await prisma.$disconnect();
  }
}

checkWorkStatuses();




