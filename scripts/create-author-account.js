const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

async function createAuthorAccount() {
  console.log("‚úçÔ∏è Cr√©ation d'un compte auteur de test");
  console.log("======================================");

  const prisma = new PrismaClient();

  try {
    await prisma.$connect();

    // R√©cup√©rer une discipline par d√©faut
    const defaultDiscipline = await prisma.discipline.findFirst();
    console.log(`üìö Discipline par d√©faut: ${defaultDiscipline?.name || 'Aucune'}`);

    const authorData = {
      name: "Gislain Auteur",
      email: "gislain@gmail.com",
      phone: "96005482",
      password: await bcrypt.hash('password123', 10),
      role: "AUTEUR",
      status: "APPROVED", // Directement approuv√©
      disciplineId: defaultDiscipline?.id || null
    };

    console.log("\nüìù Cr√©ation du compte auteur...");
    console.log(`   Nom: ${authorData.name}`);
    console.log(`   Email: ${authorData.email}`);
    console.log(`   T√©l√©phone: ${authorData.phone}`);
    console.log(`   R√¥le: ${authorData.role}`);

    // V√©rifier si le compte existe d√©j√†
    const existingUser = await prisma.user.findUnique({
      where: { email: authorData.email }
    });

    if (existingUser) {
      console.log("‚ö†Ô∏è Un compte avec cet email existe d√©j√†:");
      console.log(`   Nom: ${existingUser.name}`);
      console.log(`   R√¥le: ${existingUser.role}`);
      console.log(`   Statut: ${existingUser.status}`);
      
      if (existingUser.role !== "AUTEUR") {
        console.log("\nüîÑ Mise √† jour du r√¥le vers AUTEUR...");
        const updatedUser = await prisma.user.update({
          where: { id: existingUser.id },
          data: { role: "AUTEUR", status: "APPROVED" }
        });
        console.log("‚úÖ R√¥le mis √† jour avec succ√®s !");
      }
      
      console.log("\nüîë Informations de connexion:");
      console.log(`   Email: ${existingUser.email}`);
      console.log(`   Mot de passe: password123`);
      
      return;
    }

    const newUser = await prisma.user.create({
      data: authorData
    });

    console.log("‚úÖ Compte auteur cr√©√© avec succ√®s !");
    console.log(`   ID: ${newUser.id}`);
    console.log(`   Nom: ${newUser.name}`);
    console.log(`   Email: ${newUser.email}`);
    console.log(`   R√¥le: ${newUser.role}`);
    console.log(`   Statut: ${newUser.status}`);

    console.log("\nüîë INFORMATIONS DE CONNEXION:");
    console.log("==============================");
    console.log(`üìß Email: ${newUser.email}`);
    console.log(`üîê Mot de passe: password123`);

    console.log("\nüß™ TESTS √Ä EFFECTUER:");
    console.log("======================");
    console.log("1. Se connecter avec les identifiants ci-dessus");
    console.log("2. Aller sur /dashboard/auteur");
    console.log("3. Cr√©er une nouvelle ≈ìuvre");
    console.log("4. S√©lectionner un projet valid√© (si disponible)");
    console.log("5. Soumettre l'≈ìuvre pour validation PDG");

  } catch (error) {
    console.error("‚ùå Erreur lors de la cr√©ation du compte:", error.message);
  } finally {
    await prisma.$disconnect();
    console.log("\nüîå D√©connexion de la base de donn√©es");
  }
}

createAuthorAccount().catch(console.error);
