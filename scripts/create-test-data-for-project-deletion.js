const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

async function createTestData() {
  console.log("üéØ Cr√©ation de donn√©es de test pour suppression de projet");
  console.log("======================================================");

  const prisma = new PrismaClient();

  try {
    await prisma.$connect();

    // 1. Cr√©er une discipline de test
    console.log("\n1. üìö Cr√©ation d'une discipline de test...");
    const testDiscipline = await prisma.discipline.create({
      data: {
        name: "Litt√©rature"
      }
    });
    console.log(`‚úÖ Discipline cr√©√©e: ${testDiscipline.name}`);

    // 2. Cr√©er un utilisateur concepteur de test
    console.log("\n2. üë§ Cr√©ation d'un concepteur de test...");
    const hashedPassword = await bcrypt.hash("password123", 10);
    const testConcepteur = await prisma.user.create({
      data: {
        name: "Alphonse Concepteur",
        email: "alphonse.concepteur@test.com",
        password: hashedPassword,
        role: "CONCEPTEUR",
        status: "ACTIVE",
        disciplineId: testDiscipline.id
      }
    });
    console.log(`‚úÖ Concepteur cr√©√©: ${testConcepteur.name}`);

    // 3. Cr√©er un utilisateur PDG de test
    console.log("\n3. üë®‚Äçüíº Cr√©ation d'un PDG de test...");
    const testPDG = await prisma.user.create({
      data: {
        name: "PDG Test",
        email: "pdg@test.com",
        password: hashedPassword,
        role: "PDG",
        status: "ACTIVE"
      }
    });
    console.log(`‚úÖ PDG cr√©√©: ${testPDG.name}`);

    // 4. Cr√©er des projets de test avec diff√©rents statuts
    console.log("\n4. üìã Cr√©ation de projets de test...");

    // Projet DRAFT (supprimable)
    const draftProject = await prisma.project.create({
      data: {
        title: "Manuel de Fran√ßais 2nde - DRAFT",
        description: "Un manuel complet pour la classe de seconde",
        objectives: "Am√©liorer la compr√©hension litt√©raire",
        expectedDeliverables: "Manuel de 300 pages avec exercices",
        requiredResources: "√âquipe de relecture, illustrations",
        timeline: "6 mois de d√©veloppement",
        status: "DRAFT",
        concepteurId: testConcepteur.id,
        disciplineId: testDiscipline.id
      }
    });
    console.log(`‚úÖ Projet DRAFT cr√©√©: ${draftProject.title}`);

    // Projet SUBMITTED (non supprimable)
    const submittedProject = await prisma.project.create({
      data: {
        title: "Manuel de Chimie - SUBMITTED",
        description: "Manuel de chimie pour lyc√©e",
        status: "SUBMITTED",
        submittedAt: new Date(),
        concepteurId: testConcepteur.id,
        disciplineId: testDiscipline.id
      }
    });
    console.log(`‚úÖ Projet SUBMITTED cr√©√©: ${submittedProject.title}`);

    // Projet ACCEPTED (non supprimable)
    const acceptedProject = await prisma.project.create({
      data: {
        title: "Manuel de Math√©matiques - ACCEPTED",
        description: "Manuel de math√©matiques avanc√©es",
        status: "ACCEPTED",
        submittedAt: new Date(Date.now() - 24 * 60 * 60 * 1000), // Hier
        reviewedAt: new Date(),
        concepteurId: testConcepteur.id,
        reviewerId: testPDG.id,
        disciplineId: testDiscipline.id
      }
    });
    console.log(`‚úÖ Projet ACCEPTED cr√©√©: ${acceptedProject.title}`);

    // 5. Cr√©er une ≈ìuvre associ√©e au projet accept√© (pour tester la contrainte d'int√©grit√©)
    console.log("\n5. üìñ Cr√©ation d'une ≈ìuvre associ√©e...");
    const testWork = await prisma.work.create({
      data: {
        title: "≈íuvre issue du projet accept√©",
        isbn: "978-2-1234-5678-9",
        price: 25.99,
        tva: 0.18,
        stock: 100,
        minStock: 10,
        status: "PENDING",
        concepteurId: testConcepteur.id,
        disciplineId: testDiscipline.id,
        projectId: acceptedProject.id
      }
    });
    console.log(`‚úÖ ≈íuvre cr√©√©e: ${testWork.title}`);

    console.log("\nüìä R√âSUM√â DES DONN√âES DE TEST:");
    console.log("===============================");
    console.log(`üë§ Concepteur: ${testConcepteur.name} (${testConcepteur.email})`);
    console.log(`üë®‚Äçüíº PDG: ${testPDG.name} (${testPDG.email})`);
    console.log(`üìö Discipline: ${testDiscipline.name}`);
    console.log(`üìã Projets cr√©√©s:`);
    console.log(`   ‚Ä¢ ${draftProject.title} (DRAFT) ‚úÖ SUPPRIMABLE`);
    console.log(`   ‚Ä¢ ${submittedProject.title} (SUBMITTED) ‚ùå NON SUPPRIMABLE`);
    console.log(`   ‚Ä¢ ${acceptedProject.title} (ACCEPTED) ‚ùå NON SUPPRIMABLE`);
    console.log(`üìñ ≈íuvre: ${testWork.title} (li√©e au projet accept√©)`);

    console.log("\nüß™ TESTS √Ä EFFECTUER:");
    console.log("======================");
    console.log("1. Se connecter en tant que concepteur:");
    console.log(`   Email: ${testConcepteur.email}`);
    console.log(`   Mot de passe: password123`);
    console.log("\n2. Aller sur /dashboard/concepteur/mes-projets");
    console.log("\n3. Tenter de supprimer:");
    console.log(`   ‚úÖ "${draftProject.title}" ‚Üí DOIT FONCTIONNER`);
    console.log(`   ‚ùå "${submittedProject.title}" ‚Üí IC√îNE SUPPRESSION INVISIBLE`);
    console.log(`   ‚ùå "${acceptedProject.title}" ‚Üí IC√îNE SUPPRESSION INVISIBLE`);
    console.log("\n4. Se connecter en tant que PDG:");
    console.log(`   Email: ${testPDG.email}`);
    console.log(`   Mot de passe: password123`);

  } catch (error) {
    console.error("‚ùå Erreur lors de la cr√©ation des donn√©es:", error);
  } finally {
    await prisma.$disconnect();
    console.log("\nüîå D√©connexion de la base de donn√©es");
  }
}

createTestData().catch(console.error);
