// Script pour tester la cr√©ation d'≈ìuvres avec des donn√©es r√©elles de la base
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testWorkCreation() {
  try {
    console.log("üöÄ Test de cr√©ation d'≈ìuvres avec des donn√©es r√©elles");
    console.log("=" .repeat(50));

    // 1. R√©cup√©rer un auteur existant
    const auteurs = await prisma.user.findMany({
      where: { role: 'AUTEUR' },
      take: 1
    });

    if (auteurs.length === 0) {
      console.log("‚ùå Aucun auteur trouv√©");
      return;
    }

    const auteur = auteurs[0];
    console.log(`‚úÖ Auteur s√©lectionn√©: ${auteur.name} (${auteur.email})`);

    // 2. R√©cup√©rer une discipline existante
    const disciplines = await prisma.discipline.findMany({
      take: 1
    });

    if (disciplines.length === 0) {
      console.log("‚ùå Aucune discipline trouv√©e");
      return;
    }

    const discipline = disciplines[0];
    console.log(`‚úÖ Discipline s√©lectionn√©e: ${discipline.name}`);

    // 3. Tester la cr√©ation d'≈ìuvre
    const testWork = {
      title: `Test de cr√©ation - ${new Date().toISOString()}`,
      isbn: `978-${Date.now().toString().slice(-8)}-${Math.floor(Math.random() * 10000).toString().padStart(4, '0')}`,
      price: 15000,
      stock: 100,
      minStock: 10,
      maxStock: 1000,
      disciplineId: discipline.id,
      authorId: auteur.id,
      status: 'PUBLISHED'
    };

    console.log("\nüìù Donn√©es de test:", testWork);

    // 4. Cr√©er l'≈ìuvre
    console.log("\nüîÑ Cr√©ation de l'≈ìuvre...");
    const work = await prisma.work.create({
      data: testWork,
      include: {
        author: {
          select: {
            id: true,
            name: true,
            email: true
          }
        },
        discipline: {
          select: {
            id: true,
            name: true
          }
        }
      }
    });

    console.log("‚úÖ ≈íuvre cr√©√©e avec succ√®s:", {
      id: work.id,
      title: work.title,
      isbn: work.isbn,
      status: work.status,
      author: work.author.name,
      discipline: work.discipline.name
    });

    // 5. Cr√©er un log d'audit
    console.log("\nüìù Cr√©ation du log d'audit...");
    const auditLog = await prisma.auditLog.create({
      data: {
        action: "WORK_CREATE",
        userId: auteur.id,
        performedBy: auteur.id,
        details: JSON.stringify({
          workId: work.id,
          workTitle: work.title,
          status: work.status,
          discipline: work.discipline.name,
          isbn: work.isbn
        })
      }
    });

    console.log("‚úÖ Log d'audit cr√©√©:", auditLog.id);

    // 6. Cr√©er une notification
    console.log("\nüîî Cr√©ation de la notification...");
    const notification = await prisma.notification.create({
      data: {
        userId: auteur.id,
        title: "≈íuvre cr√©√©e",
        message: `Votre ≈ìuvre "${work.title}" a √©t√© cr√©√©e avec succ√®s.`,
        type: "WORK_CREATED",
        data: JSON.stringify({
          workId: work.id,
          workTitle: work.title,
          status: work.status
        })
      }
    });

    console.log("‚úÖ Notification cr√©√©e:", notification.id);

    console.log("\n" + "=" .repeat(50));
    console.log("üèÅ Test termin√© avec succ√®s !");

  } catch (error) {
    console.error("‚ùå Erreur lors du test:", error);
    if (error.code === 'P2002') {
      console.error("üìù Erreur: L'ISBN existe d√©j√†");
    }
  } finally {
    await prisma.$disconnect();
  }
}

testWorkCreation();


