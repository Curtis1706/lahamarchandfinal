const { PrismaClient } = require('@prisma/client');
require('dotenv').config({ path: '.env.local' });

async function diagnoseRepresentativeNeon() {
  let prisma;
  
  try {
    console.log("üîç Diagnostic des repr√©sentants (Neon PostgreSQL)");
    console.log("=================================================");

    // V√©rifier la variable d'environnement
    const dbUrl = process.env.DATABASE_URL;
    
    if (!dbUrl) {
      console.log("‚ùå Variable DATABASE_URL non trouv√©e");
      console.log("\nüí° SOLUTIONS:");
      console.log("=============");
      console.log("1. Cr√©er un fichier .env.local avec votre URL Neon:");
      console.log('   DATABASE_URL="postgresql://username:password@host.neon.tech/database"');
      console.log("\n2. Ou d√©finir temporairement:");
      console.log("   set DATABASE_URL=postgresql://... (Windows)");
      console.log("   export DATABASE_URL=postgresql://... (Linux/Mac)");
      return;
    }

    console.log(`‚úÖ DATABASE_URL configur√©e: ${dbUrl.substring(0, 30)}...`);

    // Cr√©er le client Prisma
    prisma = new PrismaClient();

    console.log(`\nüîå Connexion √† Neon PostgreSQL...`);
    
    // V√©rifier la connexion
    await prisma.$connect();
    console.log(`‚úÖ Connexion r√©ussie`);

    // Trouver tous les repr√©sentants
    const representatives = await prisma.user.findMany({
      where: { role: "REPRESENTANT" },
      select: {
        id: true,
        name: true,
        email: true,
        createdAt: true,
        status: true
      }
    });

    console.log(`\nüìä ${representatives.length} repr√©sentant(s) trouv√©(s):`);
    representatives.forEach(rep => {
      console.log(`   ‚Ä¢ ${rep.name} (${rep.email})`);
      console.log(`     Statut: ${rep.status} - Cr√©√© le ${rep.createdAt.toLocaleDateString()}`);
    });

    if (representatives.length === 0) {
      console.log(`\n‚úÖ Aucun repr√©sentant trouv√© - probl√®me r√©solu!`);
      return;
    }

    // Pour chaque repr√©sentant, v√©rifier ses donn√©es
    let totalDataFound = 0;
    
    for (const rep of representatives) {
      console.log(`\nüîç Analyse d√©taill√©e pour ${rep.name}:`);
      
      // Commandes cr√©√©es par le repr√©sentant
      const ordersCreated = await prisma.order.findMany({
        where: { userId: rep.id },
        include: {
          items: {
            include: {
              work: {
                select: { title: true, isbn: true, price: true }
              }
            }
          }
        }
      });

      console.log(`   üì¶ Commandes cr√©√©es: ${ordersCreated.length}`);
      if (ordersCreated.length > 0) {
        totalDataFound += ordersCreated.length;
        let totalRevenue = 0;
        
        ordersCreated.forEach(order => {
          const orderTotal = order.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
          totalRevenue += orderTotal;
          
          console.log(`      - Commande ${order.id} (${order.status})`);
          console.log(`        ${order.items.length} item(s) - ${order.createdAt.toLocaleDateString()}`);
          console.log(`        Montant: ${orderTotal.toLocaleString()} F CFA`);
          
          order.items.forEach(item => {
            console.log(`          ‚Ä¢ ${item.work.title} (x${item.quantity}) - ${item.price.toLocaleString()} F CFA`);
          });
        });
        
        console.log(`      üí∞ Total chiffre d'affaires: ${totalRevenue.toLocaleString()} F CFA`);
      }

      // Partenaires associ√©s au repr√©sentant
      const partners = await prisma.partner.findMany({
        where: { representantId: rep.id },
        select: { name: true, type: true, createdAt: true }
      });

      console.log(`   ü§ù Partenaires associ√©s: ${partners.length}`);
      if (partners.length > 0) {
        totalDataFound += partners.length;
        partners.forEach(partner => {
          console.log(`      - ${partner.name} (${partner.type}) - ${partner.createdAt.toLocaleDateString()}`);
        });
      }

      // Notifications re√ßues
      const notifications = await prisma.notification.findMany({
        where: { userId: rep.id },
        select: { title: true, type: true, createdAt: true }
      });

      console.log(`   üîî Notifications: ${notifications.length}`);
      if (notifications.length > 0) {
        totalDataFound += notifications.length;
        notifications.slice(0, 3).forEach(notif => {
          console.log(`      - ${notif.title} (${notif.type}) - ${notif.createdAt.toLocaleDateString()}`);
        });
        if (notifications.length > 3) {
          console.log(`      ... et ${notifications.length - 3} autres`);
        }
      }
    }

    // V√©rifier la r√©partition des commandes par r√¥le
    console.log(`\nüîç V√©rification globale des commandes...`);
    
    const ordersByRole = await prisma.order.groupBy({
      by: ['userId'],
      _count: { id: true },
      _max: { createdAt: true }
    });

    const roleStats = {};
    for (const orderGroup of ordersByRole) {
      const user = await prisma.user.findUnique({
        where: { id: orderGroup.userId },
        select: { role: true, name: true }
      });
      
      if (user) {
        if (!roleStats[user.role]) roleStats[user.role] = 0;
        roleStats[user.role] += orderGroup._count.id;
      }
    }

    console.log(`   üìä R√©partition des commandes par r√¥le:`);
    Object.entries(roleStats).forEach(([role, count]) => {
      console.log(`      - ${role}: ${count} commandes`);
    });

    // Diagnostic final et recommandations
    console.log(`\nüí° DIAGNOSTIC FINAL:`);
    console.log(`====================`);
    
    if (totalDataFound > 0) {
      console.log(`‚ùå PROBL√àME CONFIRM√â: ${totalDataFound} donn√©es par d√©faut trouv√©es`);
      console.log(`\nüõ†Ô∏è SOLUTIONS RECOMMAND√âES:`);
      console.log(`1. Nettoyage cibl√© des repr√©sentants:`);
      console.log(`   node scripts/clean-representative-data-neon.js`);
      console.log(`\n2. Si vous voulez tout nettoyer:`);
      console.log(`   npm run db:reset && npm run db:seed`);
      console.log(`\n3. Cr√©er des repr√©sentants propres:`);
      console.log(`   node scripts/create-clean-representatives-neon.js`);
    } else {
      console.log(`‚úÖ AUCUN PROBL√àME: Les repr√©sentants n'ont pas de donn√©es par d√©faut`);
    }

  } catch (error) {
    console.error("‚ùå Erreur lors du diagnostic:", error.message);
    
    if (error.message.includes("Environment variable not found")) {
      console.log(`\nüí° SOLUTION IMM√âDIATE:`);
      console.log(`=====================`);
      console.log(`Cr√©ez un fichier .env.local √† la racine du projet avec:`);
      console.log(`DATABASE_URL="votre_url_neon_postgresql"`);
      console.log(`NEXTAUTH_SECRET="votre_secret"`);
      console.log(`NEXTAUTH_URL="http://localhost:3000"`);
    } else if (error.message.includes("connection") || error.message.includes("timeout")) {
      console.log(`\nüí° PROBL√àME DE CONNEXION:`);
      console.log(`=========================`);
      console.log(`1. V√©rifiez que votre base Neon est active`);
      console.log(`2. V√©rifiez l'URL de connexion`);
      console.log(`3. V√©rifiez votre connexion internet`);
    }
  } finally {
    if (prisma) {
      await prisma.$disconnect();
    }
  }
}

diagnoseRepresentativeNeon();
