const { PrismaClient } = require('@prisma/client');

async function migrateExistingWorks() {
  console.log("üîÑ Migration des ≈ìuvres existantes");
  console.log("===================================");

  const prisma = new PrismaClient();

  try {
    await prisma.$connect();

    // 1. V√©rifier les ≈ìuvres existantes avec concepteurId mais sans authorId
    console.log("\n1. üìä V√©rification des ≈ìuvres existantes...");
    
    const worksWithConcepteur = await prisma.work.findMany({
      where: {
        concepteurId: { not: null },
        authorId: null
      },
      include: {
        concepteur: { select: { id: true, name: true, email: true, role: true } },
        discipline: { select: { name: true } }
      }
    });

    console.log(`   Trouv√© ${worksWithConcepteur.length} ≈ìuvre(s) cr√©√©e(s) par des concepteurs`);

    if (worksWithConcepteur.length > 0) {
      console.log("\nüìã ≈íuvres √† migrer:");
      worksWithConcepteur.forEach((work, index) => {
        console.log(`   ${index + 1}. "${work.title}" par ${work.concepteur?.name || 'Inconnu'} (${work.discipline?.name || 'N/A'})`);
      });

      console.log("\n‚ö†Ô∏è PROBL√àME D√âTECT√â:");
      console.log("   Ces ≈ìuvres ont √©t√© cr√©√©es par des concepteurs,");
      console.log("   mais selon les nouveaux r√¥les, seuls les AUTEURS peuvent cr√©er des ≈ìuvres.");

      console.log("\nüîß OPTIONS DE MIGRATION:");
      console.log("=========================");

      console.log("\n   Option 1 - Cr√©er des comptes auteurs:");
      console.log("      ‚Ä¢ Cr√©er un compte AUTEUR pour chaque concepteur");
      console.log("      ‚Ä¢ Transf√©rer les ≈ìuvres vers ces nouveaux comptes");
      console.log("      ‚Ä¢ Pr√©server les donn√©es existantes");

      console.log("\n   Option 2 - Convertir concepteurs en auteurs:");
      console.log("      ‚Ä¢ Changer le r√¥le des concepteurs en AUTEUR");
      console.log("      ‚Ä¢ Mettre √† jour authorId = concepteurId");
      console.log("      ‚Ä¢ ‚ö†Ô∏è Perte du r√¥le concepteur");

      console.log("\n   Option 3 - Supprimer les ≈ìuvres existantes:");
      console.log("      ‚Ä¢ Supprimer toutes les ≈ìuvres de concepteurs");
      console.log("      ‚Ä¢ Red√©marrer avec une base propre");
      console.log("      ‚Ä¢ ‚ö†Ô∏è Perte de donn√©es");

      console.log("\nüí° RECOMMANDATION:");
      console.log("   Utiliser l'Option 1 pour pr√©server les donn√©es");
      console.log("   et respecter la nouvelle logique des r√¥les.");
    }

    // 2. V√©rifier les ≈ìuvres avec authorId existant
    const worksWithAuthor = await prisma.work.findMany({
      where: {
        authorId: { not: null }
      },
      include: {
        author: { select: { name: true, role: true } }
      }
    });

    console.log(`\n   Trouv√© ${worksWithAuthor.length} ≈ìuvre(s) avec auteur d√©fini`);

    // 3. Proposer une migration automatique
    if (worksWithConcepteur.length > 0) {
      console.log("\nü§ñ MIGRATION AUTOMATIQUE PROPOS√âE:");
      console.log("====================================");

      for (const work of worksWithConcepteur) {
        if (work.concepteur) {
          console.log(`\n   üìù ≈íuvre: "${work.title}"`);
          console.log(`   üë®‚Äçüé® Concepteur: ${work.concepteur.name} (${work.concepteur.email})`);
          
          // V√©rifier si un auteur existe d√©j√† avec le m√™me email
          const existingAuthor = await prisma.user.findFirst({
            where: {
              email: work.concepteur.email,
              role: "AUTEUR"
            }
          });

          if (existingAuthor) {
            console.log(`   ‚úÖ Auteur existant trouv√©: ${existingAuthor.id}`);
          } else {
            console.log(`   üìù Cr√©er nouvel auteur bas√© sur: ${work.concepteur.name}`);
            console.log(`      Email: ${work.concepteur.email.replace('@', '.auteur@')}`);
          }
        }
      }

      console.log("\n‚ö†Ô∏è CETTE MIGRATION N'EST PAS APPLIQU√âE AUTOMATIQUEMENT");
      console.log("   Ex√©cutez le script appropri√© selon votre choix.");
    }

    // 4. Statistiques finales
    const totalWorks = await prisma.work.count();
    const worksWithoutAuthor = await prisma.work.count({
      where: { authorId: null }
    });

    console.log("\nüìä STATISTIQUES:");
    console.log("==================");
    console.log(`   Total ≈ìuvres: ${totalWorks}`);
    console.log(`   Sans auteur: ${worksWithoutAuthor}`);
    console.log(`   Avec auteur: ${totalWorks - worksWithoutAuthor}`);

  } catch (error) {
    console.error("‚ùå Erreur lors de la migration:", error.message);
  } finally {
    await prisma.$disconnect();
    console.log("\nüîå D√©connexion de la base de donn√©es");
  }
}

migrateExistingWorks().catch(console.error);
