const { PrismaClient } = require('@prisma/client');

// Utiliser la configuration par d√©faut du projet
const prisma = new PrismaClient();

async function diagnoseRepresentativeData() {
  try {
    console.log("üîç Diagnostic des donn√©es des repr√©sentants");
    console.log("=============================================");

    // 1. Trouver tous les repr√©sentants
    const representatives = await prisma.user.findMany({
      where: { role: "REPRESENTANT" },
      select: {
        id: true,
        name: true,
        email: true,
        createdAt: true
      }
    });

    console.log(`\nüìä ${representatives.length} repr√©sentant(s) trouv√©(s):`);
    representatives.forEach(rep => {
      console.log(`   ‚Ä¢ ${rep.name} (${rep.email}) - Cr√©√© le ${rep.createdAt.toLocaleDateString()}`);
    });

    // 2. V√©rifier les commandes associ√©es √† chaque repr√©sentant
    for (const rep of representatives) {
      console.log(`\nüîç Analyse pour ${rep.name}:`);
      
      // Commandes cr√©√©es par le repr√©sentant
      const ordersCreated = await prisma.order.findMany({
        where: { userId: rep.id },
        include: {
          items: {
            include: {
              work: true
            }
          }
        }
      });

      console.log(`   üì¶ Commandes cr√©√©es: ${ordersCreated.length}`);
      if (ordersCreated.length > 0) {
        ordersCreated.forEach(order => {
          console.log(`      - Commande ${order.id} (${order.status}) - ${order.createdAt.toLocaleDateString()}`);
          console.log(`        Items: ${order.items.length}`);
        });
      }

      // Partenaires associ√©s au repr√©sentant
      const partners = await prisma.partner.findMany({
        where: { representantId: rep.id }
      });

      console.log(`   ü§ù Partenaires associ√©s: ${partners.length}`);
      if (partners.length > 0) {
        partners.forEach(partner => {
          console.log(`      - ${partner.name} (${partner.type})`);
        });
      }

      // Notifications re√ßues
      const notifications = await prisma.notification.findMany({
        where: { userId: rep.id }
      });

      console.log(`   üîî Notifications: ${notifications.length}`);
    }

    // 3. V√©rifier s'il y a des commandes orphelines
    console.log(`\nüîç V√©rification des commandes orphelines...`);
    
    const allOrders = await prisma.order.findMany({
      include: {
        user: {
          select: { name: true, role: true }
        }
      }
    });

    console.log(`   üì¶ Total des commandes dans le syst√®me: ${allOrders.length}`);
    
    const ordersByRole = {};
    allOrders.forEach(order => {
      const role = order.user.role;
      if (!ordersByRole[role]) ordersByRole[role] = 0;
      ordersByRole[role]++;
    });

    console.log(`   üìä R√©partition par r√¥le:`);
    Object.entries(ordersByRole).forEach(([role, count]) => {
      console.log(`      - ${role}: ${count} commandes`);
    });

    // 4. Recommandations
    console.log(`\nüí° RECOMMANDATIONS:`);
    console.log(`===================`);
    
    if (representatives.some(rep => ordersCreated.length > 0)) {
      console.log(`‚ùå Probl√®me d√©tect√©: Des repr√©sentants ont des commandes associ√©es`);
      console.log(`   ‚Üí Solution: Ex√©cuter le script de nettoyage`);
    } else {
      console.log(`‚úÖ Aucun probl√®me d√©tect√©: Les repr√©sentants n'ont pas de donn√©es par d√©faut`);
    }

  } catch (error) {
    console.error("‚ùå Erreur lors du diagnostic:", error);
  } finally {
    await prisma.$disconnect();
  }
}

diagnoseRepresentativeData();
