const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function testProjectManagement() {
  try {
    console.log("üß™ Test de la gestion des projets");
    console.log("=================================");

    // 1. Trouver un Concepteur
    const concepteur = await prisma.user.findFirst({
      where: { role: 'CONCEPTEUR' },
    });

    if (!concepteur) {
      console.error("‚ùå Aucun concepteur trouv√©. Veuillez cr√©er un concepteur d'abord.");
      return;
    }

    console.log("‚úÖ Concepteur trouv√©:", concepteur.name);

    // 2. Trouver une Discipline
    const discipline = await prisma.discipline.findFirst();

    if (!discipline) {
      console.error("‚ùå Aucune discipline trouv√©e. Veuillez cr√©er une discipline d'abord.");
      return;
    }

    console.log("‚úÖ Discipline trouv√©e:", discipline.name);

    // 3. Trouver le PDG
    const pdg = await prisma.user.findFirst({
      where: { role: 'PDG' },
    });

    if (!pdg) {
      console.error("‚ùå Aucun PDG trouv√©. Veuillez cr√©er un PDG d'abord.");
      return;
    }

    console.log("‚úÖ PDG trouv√©:", pdg.name);

    console.log("\nüìã Test 1: Cr√©ation et soumission de projets");
    console.log("---------------------------------------------");

    // 4. Cr√©er plusieurs projets avec diff√©rents statuts
    const projects = [
      {
        title: "Projet Math√©matiques Interactives",
        description: "D√©veloppement d'une plateforme d'apprentissage des math√©matiques avec des exercices interactifs et des vid√©os p√©dagogiques.",
        status: "DRAFT"
      },
      {
        title: "Collection Litt√©rature Africaine",
        description: "Cr√©ation d'une collection de livres de litt√©rature africaine pour les √©l√®ves du secondaire avec des analyses et des questions de compr√©hension.",
        status: "SUBMITTED"
      },
      {
        title: "Cours de Sciences Physiques",
        description: "√âlaboration d'un cours complet de sciences physiques avec des exp√©riences virtuelles et des simulations.",
        status: "UNDER_REVIEW"
      },
      {
        title: "Manuel d'Histoire du Cameroun",
        description: "R√©daction d'un manuel d'histoire du Cameroun adapt√© aux programmes scolaires avec des cartes et des illustrations.",
        status: "ACCEPTED"
      },
      {
        title: "Projet Informatique Rejet√©",
        description: "Projet de cours d'informatique qui a √©t√© rejet√© pour non-conformit√© aux standards p√©dagogiques.",
        status: "REJECTED"
      }
    ];

    const createdProjects = [];

    for (const projectData of projects) {
      const project = await prisma.project.create({
        data: {
          title: projectData.title,
          description: projectData.description,
          status: projectData.status,
          disciplineId: discipline.id,
          concepteurId: concepteur.id,
          submittedAt: projectData.status !== "DRAFT" ? new Date() : null,
          reviewedAt: projectData.status === "ACCEPTED" || projectData.status === "REJECTED" ? new Date() : null,
          reviewerId: projectData.status === "ACCEPTED" || projectData.status === "REJECTED" ? pdg.id : null
        },
        include: {
          concepteur: {
            select: {
              id: true,
              name: true,
              email: true
            }
          },
          discipline: {
            select: {
              id: true,
              name: true
            }
          },
          reviewer: {
            select: {
              id: true,
              name: true,
              email: true
            }
          }
        }
      });

      createdProjects.push(project);
      console.log(`‚úÖ Projet cr√©√©: ${project.title} (${project.status})`);
    }

    console.log("\nüìã Test 2: Cr√©ation d'≈ìuvres pour les projets accept√©s");
    console.log("-----------------------------------------------------");

    // 5. Cr√©er des ≈ìuvres pour les projets accept√©s
    const acceptedProject = createdProjects.find(p => p.status === "ACCEPTED");
    
    if (acceptedProject) {
      const isbn = `978-${Date.now().toString().slice(-9)}-${Math.floor(Math.random() * 1000).toString().padStart(3, '0')}`;
      
      const work = await prisma.work.create({
        data: {
          title: acceptedProject.title,
          isbn: isbn,
          price: 25000,
          stock: 500,
          minStock: 50,
          maxStock: 1000,
          status: "PUBLISHED",
          disciplineId: discipline.id,
          concepteurId: concepteur.id,
          projectId: acceptedProject.id
        },
        include: {
          project: {
            select: {
              id: true,
              title: true,
              status: true
            }
          },
          concepteur: {
            select: {
              id: true,
              name: true,
              email: true
            }
          },
          discipline: {
            select: {
              id: true,
              name: true
            }
          }
        }
      });

      console.log(`‚úÖ ≈íuvre cr√©√©e pour le projet accept√©: ${work.title}`);
      console.log(`   - ISBN: ${work.isbn}`);
      console.log(`   - Prix: ${work.price} FCFA`);
      console.log(`   - Statut: ${work.status}`);
    }

    console.log("\nüìã Test 3: Cr√©ation de notifications");
    console.log("------------------------------------");

    // 6. Cr√©er des notifications pour les diff√©rents √©v√©nements
    const notifications = [
      {
        userId: concepteur.id,
        title: "Projet soumis avec succ√®s",
        message: "Votre projet 'Collection Litt√©rature Africaine' a √©t√© soumis pour validation.",
        type: "PROJECT_SUBMITTED",
        data: JSON.stringify({
          projectId: createdProjects.find(p => p.status === "SUBMITTED")?.id,
          projectTitle: "Collection Litt√©rature Africaine"
        })
      },
      {
        userId: concepteur.id,
        title: "Projet accept√©",
        message: "F√©licitations ! Votre projet 'Manuel d'Histoire du Cameroun' a √©t√© accept√© par le PDG.",
        type: "PROJECT_ACCEPTED",
        data: JSON.stringify({
          projectId: acceptedProject?.id,
          projectTitle: "Manuel d'Histoire du Cameroun"
        })
      },
      {
        userId: concepteur.id,
        title: "Projet refus√©",
        message: "Votre projet 'Projet Informatique Rejet√©' a √©t√© refus√©. Motif: Non-conformit√© aux standards p√©dagogiques.",
        type: "PROJECT_REJECTED",
        data: JSON.stringify({
          projectId: createdProjects.find(p => p.status === "REJECTED")?.id,
          projectTitle: "Projet Informatique Rejet√©",
          reason: "Non-conformit√© aux standards p√©dagogiques"
        })
      }
    ];

    for (const notificationData of notifications) {
      const notification = await prisma.notification.create({
        data: notificationData
      });
      console.log(`‚úÖ Notification cr√©√©e: ${notification.title}`);
    }

    console.log("\nüìä R√©sum√© des tests");
    console.log("===================");

    // Compter les projets par statut
    const projectStats = await prisma.project.groupBy({
      by: ['status'],
      _count: {
        id: true,
      },
    });

    console.log("üìÅ R√©partition des projets par statut:");
    projectStats.forEach(stat => {
      console.log(`   - ${stat.status}: ${stat._count.id}`);
    });

    // Compter les ≈ìuvres avec projets
    const worksWithProjects = await prisma.work.count({
      where: { projectId: { not: null } },
    });

    console.log("üîó ≈íuvres cr√©√©es √† partir de projets:", worksWithProjects);

    // Compter les notifications
    const notificationCount = await prisma.notification.count();
    console.log("üîî Notifications cr√©√©es:", notificationCount);

    // Compter les notifications non lues
    const unreadNotifications = await prisma.notification.count({
      where: { read: false },
    });
    console.log("üîî Notifications non lues:", unreadNotifications);

    console.log("\n‚úÖ Tests de gestion des projets termin√©s avec succ√®s!");
    console.log("\nüí° Prochaines √©tapes:");
    console.log("   1. Testez la page /dashboard/pdg/gestion-projets");
    console.log("   2. V√©rifiez la liste des projets avec leurs statuts");
    console.log("   3. Testez la validation/refus des projets");
    console.log("   4. V√©rifiez les notifications re√ßues par les concepteurs");

  } catch (error) {
    console.error("‚ùå Erreur lors des tests:", error);
  } finally {
    await prisma.$disconnect();
  }
}

testProjectManagement();

