const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

// Configuration de l'environnement pour SQLite
process.env.DATABASE_URL = "file:./dev.db";

async function setupAndDiagnose() {
  try {
    console.log("üîß Configuration de l'environnement et diagnostic");
    console.log("=================================================");

    // V√©rifier que le fichier de base de donn√©es existe
    const dbPath = path.join(__dirname, '..', 'dev.db');
    const backendDbPath = path.join(__dirname, '..', 'backend', 'prisma', 'dev.db');
    
    console.log(`üìÅ V√©rification des bases de donn√©es:`);
    console.log(`   - Racine: ${fs.existsSync(dbPath) ? '‚úÖ' : '‚ùå'} ${dbPath}`);
    console.log(`   - Backend: ${fs.existsSync(backendDbPath) ? '‚úÖ' : '‚ùå'} ${backendDbPath}`);

    // Utiliser la base de donn√©es qui existe
    let dbUrl;
    if (fs.existsSync(backendDbPath)) {
      dbUrl = "file:./backend/prisma/dev.db";
      process.env.DATABASE_URL = dbUrl;
      console.log(`‚úÖ Utilisation de la base backend: ${dbUrl}`);
    } else if (fs.existsSync(dbPath)) {
      dbUrl = "file:./dev.db";
      process.env.DATABASE_URL = dbUrl;
      console.log(`‚úÖ Utilisation de la base racine: ${dbUrl}`);
    } else {
      console.log(`‚ùå Aucune base de donn√©es trouv√©e!`);
      console.log(`üí° Cr√©er une base de donn√©es avec: npx prisma db push`);
      return;
    }

    // Cr√©er le client Prisma
    const prisma = new PrismaClient();

    console.log(`\nüîç Diagnostic des repr√©sentants:`);
    
    // V√©rifier la connexion
    await prisma.$connect();
    console.log(`‚úÖ Connexion √† la base de donn√©es r√©ussie`);

    // Trouver tous les repr√©sentants
    const representatives = await prisma.user.findMany({
      where: { role: "REPRESENTANT" },
      select: {
        id: true,
        name: true,
        email: true,
        createdAt: true
      }
    });

    console.log(`\nüìä ${representatives.length} repr√©sentant(s) trouv√©(s):`);
    representatives.forEach(rep => {
      console.log(`   ‚Ä¢ ${rep.name} (${rep.email}) - Cr√©√© le ${rep.createdAt.toLocaleDateString()}`);
    });

    // Pour chaque repr√©sentant, v√©rifier ses donn√©es
    for (const rep of representatives) {
      console.log(`\nüîç Analyse pour ${rep.name}:`);
      
      // Commandes cr√©√©es par le repr√©sentant
      const ordersCreated = await prisma.order.findMany({
        where: { userId: rep.id },
        include: {
          items: {
            include: {
              work: true
            }
          }
        }
      });

      console.log(`   üì¶ Commandes cr√©√©es: ${ordersCreated.length}`);
      if (ordersCreated.length > 0) {
        ordersCreated.forEach(order => {
          console.log(`      - Commande ${order.id} (${order.status}) - ${order.createdAt.toLocaleDateString()}`);
          console.log(`        Items: ${order.items.length}`);
        });
      }

      // Partenaires associ√©s au repr√©sentant
      const partners = await prisma.partner.findMany({
        where: { representantId: rep.id }
      });

      console.log(`   ü§ù Partenaires associ√©s: ${partners.length}`);
      if (partners.length > 0) {
        partners.forEach(partner => {
          console.log(`      - ${partner.name} (${partner.type})`);
        });
      }

      // Notifications re√ßues
      const notifications = await prisma.notification.findMany({
        where: { userId: rep.id }
      });

      console.log(`   üîî Notifications: ${notifications.length}`);
    }

    // V√©rifier s'il y a des commandes orphelines
    console.log(`\nüîç V√©rification des commandes orphelines...`);
    
    const allOrders = await prisma.order.findMany({
      include: {
        user: {
          select: { name: true, role: true }
        }
      }
    });

    console.log(`   üì¶ Total des commandes dans le syst√®me: ${allOrders.length}`);
    
    const ordersByRole = {};
    allOrders.forEach(order => {
      const role = order.user.role;
      if (!ordersByRole[role]) ordersByRole[role] = 0;
      ordersByRole[role]++;
    });

    console.log(`   üìä R√©partition par r√¥le:`);
    Object.entries(ordersByRole).forEach(([role, count]) => {
      console.log(`      - ${role}: ${count} commandes`);
    });

    // Recommandations
    console.log(`\nüí° RECOMMANDATIONS:`);
    console.log(`===================`);
    
    const representativesWithData = representatives.filter(async rep => {
      const ordersCount = await prisma.order.count({ where: { userId: rep.id } });
      const partnersCount = await prisma.partner.count({ where: { representantId: rep.id } });
      const notificationsCount = await prisma.notification.count({ where: { userId: rep.id } });
      return ordersCount > 0 || partnersCount > 0 || notificationsCount > 0;
    });

    if (representativesWithData.length > 0) {
      console.log(`‚ùå Probl√®me d√©tect√©: Des repr√©sentants ont des donn√©es associ√©es`);
      console.log(`   ‚Üí Solution: Ex√©cuter le script de nettoyage`);
      console.log(`   ‚Üí Commande: node scripts/clean-representative-data.js`);
    } else {
      console.log(`‚úÖ Aucun probl√®me d√©tect√©: Les repr√©sentants n'ont pas de donn√©es par d√©faut`);
    }

  } catch (error) {
    console.error("‚ùå Erreur lors du diagnostic:", error.message);
    
    if (error.message.includes("Environment variable not found: DATABASE_URL")) {
      console.log(`\nüí° SOLUTION:`);
      console.log(`============`);
      console.log(`1. Cr√©er un fichier .env avec:`);
      console.log(`   DATABASE_URL="file:./backend/prisma/dev.db"`);
      console.log(`2. Ou ex√©cuter: npx prisma db push`);
    }
  } finally {
    await prisma.$disconnect();
  }
}

setupAndDiagnose();
