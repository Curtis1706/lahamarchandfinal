const { PrismaClient } = require('@prisma/client');
const fs = require('fs');

async function diagnoseWithSqlite() {
  try {
    console.log("üîß Diagnostic avec SQLite");
    console.log("=========================");

    // Cr√©er un client Prisma avec configuration SQLite
    const prisma = new PrismaClient({
      datasources: {
        db: {
          url: "file:./backend/prisma/dev.db"
        }
      }
    });

    console.log(`‚úÖ Connexion √† la base SQLite`);

    // V√©rifier la connexion
    await prisma.$connect();
    console.log(`‚úÖ Connexion r√©ussie`);

    // Trouver tous les repr√©sentants
    const representatives = await prisma.user.findMany({
      where: { role: "REPRESENTANT" },
      select: {
        id: true,
        name: true,
        email: true,
        createdAt: true
      }
    });

    console.log(`\nüìä ${representatives.length} repr√©sentant(s) trouv√©(s):`);
    representatives.forEach(rep => {
      console.log(`   ‚Ä¢ ${rep.name} (${rep.email}) - Cr√©√© le ${rep.createdAt.toLocaleDateString()}`);
    });

    if (representatives.length === 0) {
      console.log(`\n‚úÖ Aucun repr√©sentant trouv√© - probl√®me r√©solu!`);
      return;
    }

    // Pour chaque repr√©sentant, v√©rifier ses donn√©es
    let totalDataFound = 0;
    
    for (const rep of representatives) {
      console.log(`\nüîç Analyse pour ${rep.name}:`);
      
      // Commandes cr√©√©es par le repr√©sentant
      const ordersCreated = await prisma.order.findMany({
        where: { userId: rep.id },
        include: {
          items: {
            include: {
              work: true
            }
          }
        }
      });

      console.log(`   üì¶ Commandes cr√©√©es: ${ordersCreated.length}`);
      if (ordersCreated.length > 0) {
        totalDataFound += ordersCreated.length;
        ordersCreated.forEach(order => {
          console.log(`      - Commande ${order.id} (${order.status}) - ${order.createdAt.toLocaleDateString()}`);
          console.log(`        Items: ${order.items.length}`);
        });
      }

      // Partenaires associ√©s au repr√©sentant
      const partners = await prisma.partner.findMany({
        where: { representantId: rep.id }
      });

      console.log(`   ü§ù Partenaires associ√©s: ${partners.length}`);
      if (partners.length > 0) {
        totalDataFound += partners.length;
        partners.forEach(partner => {
          console.log(`      - ${partner.name} (${partner.type})`);
        });
      }

      // Notifications re√ßues
      const notifications = await prisma.notification.findMany({
        where: { userId: rep.id }
      });

      console.log(`   üîî Notifications: ${notifications.length}`);
      if (notifications.length > 0) {
        totalDataFound += notifications.length;
      }
    }

    // V√©rifier s'il y a des commandes orphelines
    console.log(`\nüîç V√©rification des commandes orphelines...`);
    
    const allOrders = await prisma.order.findMany({
      include: {
        user: {
          select: { name: true, role: true }
        }
      }
    });

    console.log(`   üì¶ Total des commandes dans le syst√®me: ${allOrders.length}`);
    
    const ordersByRole = {};
    allOrders.forEach(order => {
      const role = order.user.role;
      if (!ordersByRole[role]) ordersByRole[role] = 0;
      ordersByRole[role]++;
    });

    console.log(`   üìä R√©partition par r√¥le:`);
    Object.entries(ordersByRole).forEach(([role, count]) => {
      console.log(`      - ${role}: ${count} commandes`);
    });

    // Recommandations
    console.log(`\nüí° DIAGNOSTIC FINAL:`);
    console.log(`====================`);
    
    if (totalDataFound > 0) {
      console.log(`‚ùå PROBL√àME CONFIRM√â: ${totalDataFound} donn√©es associ√©es aux repr√©sentants`);
      console.log(`\nüõ†Ô∏è SOLUTIONS RECOMMAND√âES:`);
      console.log(`1. Nettoyage cibl√©:`);
      console.log(`   node scripts/clean-representative-data.js`);
      console.log(`\n2. Reset complet (si vous voulez tout nettoyer):`);
      console.log(`   npm run db:reset && npm run db:seed`);
    } else {
      console.log(`‚úÖ AUCUN PROBL√àME: Les repr√©sentants n'ont pas de donn√©es par d√©faut`);
      console.log(`\nüí° Si vous voyez encore des donn√©es dans l'interface:`);
      console.log(`   - V√©rifiez que vous regardez le bon compte`);
      console.log(`   - Rafra√Æchissez la page`);
      console.log(`   - V√©rifiez le cache du navigateur`);
    }

  } catch (error) {
    console.error("‚ùå Erreur lors du diagnostic:", error.message);
    
    if (error.message.includes("Error validating datasource")) {
      console.log(`\nüí° SOLUTION ALTERNATIVE:`);
      console.log(`========================`);
      console.log(`Le sch√©ma Prisma est configur√© pour PostgreSQL mais vous avez SQLite.`);
      console.log(`\nOptions:`);
      console.log(`1. Utiliser PostgreSQL (recommand√©):`);
      console.log(`   - Configurer une base PostgreSQL`);
      console.log(`   - Mettre √† jour DATABASE_URL`);
      console.log(`\n2. Changer temporairement pour SQLite:`);
      console.log(`   - Modifier prisma/schema.prisma`);
      console.log(`   - Changer provider de "postgresql" √† "sqlite"`);
      console.log(`   - Ex√©cuter: npx prisma generate`);
    }
  } finally {
    if (typeof prisma !== 'undefined') {
      await prisma.$disconnect();
    }
  }
}

diagnoseWithSqlite();
