const { PrismaClient } = require('@prisma/client');
require('dotenv').config({ path: '.env.local' });

async function cleanRepresentativeDataNeon() {
  let prisma;
  
  try {
    console.log("üßπ Nettoyage des donn√©es des repr√©sentants (Neon PostgreSQL)");
    console.log("===========================================================");

    // V√©rifier la variable d'environnement
    const dbUrl = process.env.DATABASE_URL;
    
    if (!dbUrl) {
      console.log("‚ùå Variable DATABASE_URL non trouv√©e");
      console.log("üí° Cr√©ez un fichier .env.local avec votre URL Neon");
      return;
    }

    console.log(`‚úÖ Connexion √† Neon PostgreSQL...`);

    // Cr√©er le client Prisma
    prisma = new PrismaClient();
    await prisma.$connect();
    console.log(`‚úÖ Connexion r√©ussie`);

    // 1. Trouver tous les repr√©sentants
    const representatives = await prisma.user.findMany({
      where: { role: "REPRESENTANT" },
      select: {
        id: true,
        name: true,
        email: true
      }
    });

    console.log(`üìä ${representatives.length} repr√©sentant(s) trouv√©(s)`);

    if (representatives.length === 0) {
      console.log("‚úÖ Aucun repr√©sentant trouv√©, rien √† nettoyer");
      return;
    }

    // 2. Pour chaque repr√©sentant, supprimer ses donn√©es associ√©es
    let totalCleaned = 0;
    
    for (const rep of representatives) {
      console.log(`\nüßπ Nettoyage pour ${rep.name} (${rep.email}):`);
      
      // Supprimer les notifications
      const deletedNotifications = await prisma.notification.deleteMany({
        where: { userId: rep.id }
      });
      console.log(`   üîî ${deletedNotifications.count} notification(s) supprim√©e(s)`);
      totalCleaned += deletedNotifications.count;

      // Supprimer les commandes cr√©√©es par le repr√©sentant
      const deletedOrders = await prisma.order.deleteMany({
        where: { userId: rep.id }
      });
      console.log(`   üì¶ ${deletedOrders.count} commande(s) supprim√©e(s)`);
      totalCleaned += deletedOrders.count;

      // Supprimer les partenaires associ√©s au repr√©sentant
      const deletedPartners = await prisma.partner.deleteMany({
        where: { representantId: rep.id }
      });
      console.log(`   ü§ù ${deletedPartners.count} partenaire(s) supprim√©(s)`);
      totalCleaned += deletedPartners.count;

      // Supprimer les royalties (si le repr√©sentant en a)
      const deletedRoyalties = await prisma.royalty.deleteMany({
        where: { userId: rep.id }
      });
      console.log(`   üí∞ ${deletedRoyalties.count} royaltie(s) supprim√©e(s)`);
      totalCleaned += deletedRoyalties.count;

      // Supprimer les messages envoy√©s/re√ßus
      const deletedSentMessages = await prisma.message.deleteMany({
        where: { senderId: rep.id }
      });
      const deletedReceivedMessages = await prisma.message.deleteMany({
        where: { recipientId: rep.id }
      });
      console.log(`   üí¨ ${deletedSentMessages.count + deletedReceivedMessages.count} message(s) supprim√©(s)`);
      totalCleaned += deletedSentMessages.count + deletedReceivedMessages.count;

      console.log(`   ‚úÖ ${rep.name} nettoy√© avec succ√®s`);
    }

    // 3. V√©rification finale
    console.log(`\nüîç V√©rification finale:`);
    
    const remainingOrders = await prisma.order.count({
      where: {
        user: { role: "REPRESENTANT" }
      }
    });

    const remainingNotifications = await prisma.notification.count({
      where: {
        user: { role: "REPRESENTANT" }
      }
    });

    const remainingPartners = await prisma.partner.count({
      where: {
        representant: { role: "REPRESENTANT" }
      }
    });

    console.log(`   üì¶ Commandes restantes: ${remainingOrders}`);
    console.log(`   üîî Notifications restantes: ${remainingNotifications}`);
    console.log(`   ü§ù Partenaires restants: ${remainingPartners}`);

    if (remainingOrders === 0 && remainingNotifications === 0 && remainingPartners === 0) {
      console.log(`\n‚úÖ NETTOYAGE TERMIN√â AVEC SUCC√àS!`);
      console.log(`   ${totalCleaned} donn√©es supprim√©es`);
      console.log(`   Les repr√©sentants n'ont plus de donn√©es par d√©faut`);
      console.log(`\nüí° Vous pouvez maintenant cr√©er des repr√©sentants propres`);
    } else {
      console.log(`\n‚ö†Ô∏è ATTENTION: Il reste des donn√©es associ√©es aux repr√©sentants`);
      console.log(`   Veuillez v√©rifier manuellement ou ex√©cuter le script √† nouveau`);
    }

  } catch (error) {
    console.error("‚ùå Erreur lors du nettoyage:", error.message);
    
    if (error.message.includes("Environment variable not found")) {
      console.log(`\nüí° SOLUTION:`);
      console.log(`=============`);
      console.log(`Cr√©ez un fichier .env.local avec votre URL Neon:`);
      console.log(`DATABASE_URL="postgresql://username:password@host.neon.tech/database"`);
    } else if (error.message.includes("connection") || error.message.includes("timeout")) {
      console.log(`\nüí° PROBL√àME DE CONNEXION:`);
      console.log(`=========================`);
      console.log(`1. V√©rifiez que votre base Neon est active`);
      console.log(`2. V√©rifiez l'URL de connexion`);
      console.log(`3. V√©rifiez votre connexion internet`);
    }
  } finally {
    if (prisma) {
      await prisma.$disconnect();
    }
  }
}

cleanRepresentativeDataNeon();
