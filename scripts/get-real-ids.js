const { PrismaClient } = require('@prisma/client');

async function getRealIds() {
  console.log("üîç R√©cup√©ration des IDs r√©els");
  console.log("=============================");

  const prisma = new PrismaClient();

  try {
    await prisma.$connect();

    console.log("\nüìö Disciplines disponibles:");
    const disciplines = await prisma.discipline.findMany({
      select: { id: true, name: true }
    });
    
    disciplines.forEach(d => {
      console.log(`   ${d.name}: ${d.id}`);
    });

    console.log("\nüë®‚Äçüé® Concepteurs disponibles:");
    const concepteurs = await prisma.user.findMany({
      where: { role: "CONCEPTEUR" },
      select: { id: true, name: true, email: true }
    });
    
    concepteurs.forEach(c => {
      console.log(`   ${c.name} (${c.email}): ${c.id}`);
    });

    // Essayer de cr√©er une ≈ìuvre avec les vrais IDs
    if (disciplines.length > 0 && concepteurs.length > 0) {
      console.log("\nüß™ Test de cr√©ation d'≈ìuvre avec IDs r√©els...");
      
      try {
        const testWork = await prisma.work.create({
          data: {
            title: "Test ≈íuvre Schema",
            description: "Description de test pour v√©rifier le nouveau champ",
            isbn: `TEST-${Date.now()}`,
            price: 0,
            tva: 0.18,
            stock: 0,
            minStock: 0,
            
            // Nouveaux champs √† tester
            category: "test",
            targetAudience: "test",
            educationalObjectives: "Objectifs de test",
            contentType: "manuel",
            keywords: "test,schema,prisma",
            files: JSON.stringify([{ name: "test.pdf" }]),
            
            status: "DRAFT",
            
            // Relations avec IDs r√©els
            discipline: {
              connect: { id: disciplines[0].id }
            },
            concepteur: {
              connect: { id: concepteurs[0].id }
            }
          }
        });

        console.log("‚úÖ Cr√©ation r√©ussie avec nouveaux champs !");
        console.log("   ID:", testWork.id);
        console.log("   Titre:", testWork.title);
        console.log("   Description:", testWork.description ? "‚úÖ Pr√©sente" : "‚ùå Manquante");
        console.log("   Category:", testWork.category ? "‚úÖ Pr√©sente" : "‚ùå Manquante");
        console.log("   ContentType:", testWork.contentType ? "‚úÖ Pr√©sent" : "‚ùå Manquant");
        console.log("   Keywords:", testWork.keywords ? "‚úÖ Pr√©sents" : "‚ùå Manquants");

        // Nettoyer - supprimer l'≈ìuvre de test
        await prisma.work.delete({ where: { id: testWork.id } });
        console.log("‚úÖ ≈íuvre de test supprim√©e");

      } catch (createError) {
        console.error("‚ùå Erreur lors de la cr√©ation de test:", createError.message);
        
        if (createError.message.includes("Unknown argument")) {
          console.log("\nüîß SOLUTION REQUISE:");
          console.log("   Le client Prisma doit √™tre r√©g√©n√©r√©");
          console.log("   1. Arr√™ter le serveur de d√©veloppement");
          console.log("   2. Supprimer: node_modules\\.prisma\\");
          console.log("   3. Ex√©cuter: npx prisma generate --force");
          console.log("   4. Red√©marrer: npm run dev");
        }
      }
    }

  } catch (error) {
    console.error("‚ùå Erreur:", error.message);
  } finally {
    await prisma.$disconnect();
    console.log("\nüîå D√©connexion");
  }
}

getRealIds().catch(console.error);
