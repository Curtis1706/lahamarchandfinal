const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function createPDGUser() {
  console.log("üîß Cr√©ation d'un utilisateur PDG");
  console.log("=================================");

  try {
    // V√©rifier si un PDG existe d√©j√†
    const existingPDG = await prisma.user.findFirst({
      where: { role: 'PDG' }
    });

    if (existingPDG) {
      console.log("‚ö†Ô∏è Un utilisateur PDG existe d√©j√†:");
      console.log(`   ‚Ä¢ Nom: ${existingPDG.name}`);
      console.log(`   ‚Ä¢ Email: ${existingPDG.email}`);
      console.log(`   ‚Ä¢ Statut: ${existingPDG.status}`);
      console.log(`   ‚Ä¢ Cr√©√© le: ${existingPDG.createdAt}`);
      return;
    }

    // Donn√©es du PDG
    const pdgData = {
      name: "PDG LAHA",
      email: "pdg@laha.gabon",
      phone: "+229 40 76 76 76",
      password: "password123",
      role: "PDG"
    };

    console.log("üîç Cr√©ation de l'utilisateur PDG...");
    console.log(`   ‚Ä¢ Nom: ${pdgData.name}`);
    console.log(`   ‚Ä¢ Email: ${pdgData.email}`);
    console.log(`   ‚Ä¢ T√©l√©phone: ${pdgData.phone}`);
    console.log(`   ‚Ä¢ R√¥le: ${pdgData.role}`);

    // Hasher le mot de passe
    const hashedPassword = await bcrypt.hash(pdgData.password, 12);
    console.log("‚úÖ Mot de passe hash√©");

    // Cr√©er l'utilisateur PDG
    const pdgUser = await prisma.user.create({
      data: {
        name: pdgData.name,
        email: pdgData.email,
        phone: pdgData.phone,
        password: hashedPassword,
        role: pdgData.role,
        status: "ACTIVE"
      }
    });

    console.log("‚úÖ Utilisateur PDG cr√©√© avec succ√®s:");
    console.log(`   ‚Ä¢ ID: ${pdgUser.id}`);
    console.log(`   ‚Ä¢ Nom: ${pdgUser.name}`);
    console.log(`   ‚Ä¢ Email: ${pdgUser.email}`);
    console.log(`   ‚Ä¢ T√©l√©phone: ${pdgUser.phone}`);
    console.log(`   ‚Ä¢ R√¥le: ${pdgUser.role}`);
    console.log(`   ‚Ä¢ Statut: ${pdgUser.status}`);
    console.log(`   ‚Ä¢ Cr√©√© le: ${pdgUser.createdAt}`);

    // Cr√©er un log d'audit
    await prisma.auditLog.create({
      data: {
        action: "USER_CREATE",
        userId: pdgUser.id,
        performedBy: pdgUser.id, // Auto-cr√©ation
        details: `Utilisateur PDG ${pdgUser.name} cr√©√© lors de l'initialisation du syst√®me`,
        metadata: JSON.stringify({
          userId: pdgUser.id,
          userName: pdgUser.name,
          userEmail: pdgUser.email,
          userRole: pdgUser.role,
          status: pdgUser.status,
          createdBy: "SYSTEM_INIT"
        })
      }
    });
    console.log("‚úÖ Log d'audit cr√©√©");

    console.log("\nüîê INFORMATIONS DE CONNEXION:");
    console.log("=============================");
    console.log(`   ‚Ä¢ Email: ${pdgData.email}`);
    console.log(`   ‚Ä¢ Mot de passe: ${pdgData.password}`);
    console.log(`   ‚Ä¢ URL de connexion: http://localhost:3000/auth/login`);

    console.log("\nüìä FONCTIONNALIT√âS DISPONIBLES:");
    console.log("===============================");
    console.log("   ‚Ä¢ Gestion des utilisateurs");
    console.log("   ‚Ä¢ Validation des projets");
    console.log("   ‚Ä¢ Validation des ≈ìuvres");
    console.log("   ‚Ä¢ Gestion des disciplines");
    console.log("   ‚Ä¢ Audit et historique");
    console.log("   ‚Ä¢ Notifications syst√®me");

    console.log("\nüéØ PROCHAINES √âTAPES:");
    console.log("=====================");
    console.log("   1. Se connecter avec les identifiants ci-dessus");
    console.log("   2. Acc√©der au dashboard PDG");
    console.log("   3. Cr√©er d'autres utilisateurs si n√©cessaire");
    console.log("   4. Configurer les disciplines");
    console.log("   5. Valider les projets et ≈ìuvres");

  } catch (error) {
    console.error("‚ùå Erreur lors de la cr√©ation de l'utilisateur PDG:", error);
    console.error("   ‚Ä¢ Message:", error.message);
    console.error("   ‚Ä¢ Code:", error.code);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter la fonction
createPDGUser();
