const { PrismaClient } = require('@prisma/client');
require('dotenv').config({ path: '.env.local' });

async function testRepresentativeAPIs() {
  let prisma;
  
  try {
    console.log("üß™ Test des APIs repr√©sentant apr√®s correction");
    console.log("==============================================");

    // Cr√©er le client Prisma
    prisma = new PrismaClient();
    await prisma.$connect();
    console.log(`‚úÖ Connexion √† la base de donn√©es r√©ussie`);

    // Trouver un repr√©sentant pour tester
    const representative = await prisma.user.findFirst({
      where: { role: "REPRESENTANT" },
      select: { id: true, name: true, email: true }
    });

    if (!representative) {
      console.log("‚ùå Aucun repr√©sentant trouv√© pour le test");
      return;
    }

    console.log(`\nüîç Test avec le repr√©sentant: ${representative.name} (${representative.email})`);

    // Test 1: V√©rifier les commandes des partenaires du repr√©sentant
    console.log(`\nüì¶ Test 1: Commandes des partenaires`);
    const partnerOrders = await prisma.order.findMany({
      where: {
        partner: {
          representantId: representative.id
        }
      },
      include: {
        partner: true,
        items: true
      }
    });

    console.log(`   R√©sultat: ${partnerOrders.length} commandes trouv√©es`);
    if (partnerOrders.length > 0) {
      console.log(`   ‚ö†Ô∏è ATTENTION: Des commandes de partenaires existent encore`);
      partnerOrders.forEach(order => {
        console.log(`      - Commande ${order.id} pour ${order.partner?.name || 'Partenaire inconnu'}`);
      });
    } else {
      console.log(`   ‚úÖ Aucune commande de partenaire (correct)`);
    }

    // Test 2: V√©rifier les partenaires du repr√©sentant
    console.log(`\nü§ù Test 2: Partenaires du repr√©sentant`);
    const partners = await prisma.partner.findMany({
      where: {
        representantId: representative.id
      }
    });

    console.log(`   R√©sultat: ${partners.length} partenaires trouv√©s`);
    if (partners.length > 0) {
      console.log(`   ‚úÖ Partenaires trouv√©s (normal si le repr√©sentant en a cr√©√©)`);
      partners.forEach(partner => {
        console.log(`      - ${partner.name} (${partner.type})`);
      });
    } else {
      console.log(`   ‚ÑπÔ∏è Aucun partenaire (normal pour un nouveau repr√©sentant)`);
    }

    // Test 3: V√©rifier les ≈ìuvres (devrait √™tre 0)
    console.log(`\nüìö Test 3: ≈íuvres g√©r√©es par le repr√©sentant`);
    const works = await prisma.work.findMany({
      where: {
        id: 'never-match' // Filtre que nous avons ajout√©
      }
    });

    console.log(`   R√©sultat: ${works.length} ≈ìuvres trouv√©es`);
    if (works.length === 0) {
      console.log(`   ‚úÖ Aucune ≈ìuvre (correct selon nos corrections)`);
    } else {
      console.log(`   ‚ùå ERREUR: Des ≈ìuvres sont encore visibles`);
    }

    // Test 4: V√©rifier les auteurs (devrait √™tre 0)
    console.log(`\nüë• Test 4: Auteurs g√©r√©s par le repr√©sentant`);
    const authors = await prisma.user.findMany({
      where: {
        role: 'AUTEUR',
        id: 'never-match' // Filtre que nous avons ajout√©
      }
    });

    console.log(`   R√©sultat: ${authors.length} auteurs trouv√©s`);
    if (authors.length === 0) {
      console.log(`   ‚úÖ Aucun auteur (correct selon nos corrections)`);
    } else {
      console.log(`   ‚ùå ERREUR: Des auteurs sont encore visibles`);
    }

    // Test 5: V√©rifier le chiffre d'affaires global (devrait √™tre 0 pour ce repr√©sentant)
    console.log(`\nüí∞ Test 5: Chiffre d'affaires des partenaires`);
    const partnerOrdersForRevenue = await prisma.order.findMany({
      where: {
        partner: {
          representantId: representative.id
        }
      },
      include: {
        items: true
      }
    });

    const totalRevenue = partnerOrdersForRevenue.reduce((sum, order) => {
      return sum + order.items.reduce((itemSum, item) => {
        return itemSum + (item.price * item.quantity);
      }, 0);
    }, 0);

    console.log(`   R√©sultat: ${totalRevenue.toLocaleString()} F CFA`);
    if (totalRevenue === 0) {
      console.log(`   ‚úÖ Chiffre d'affaires √† 0 (correct pour un nouveau repr√©sentant)`);
    } else {
      console.log(`   ‚ÑπÔ∏è Chiffre d'affaires non nul (normal si le repr√©sentant a des partenaires avec des commandes)`);
    }

    // R√©sum√© final
    console.log(`\nüìä R√âSUM√â DU TEST:`);
    console.log(`==================`);
    
    const hasCleanData = partnerOrders.length === 0 && works.length === 0 && authors.length === 0;
    
    if (hasCleanData) {
      console.log(`‚úÖ SUCC√àS: Les APIs repr√©sentant retournent maintenant des donn√©es propres`);
      console.log(`   - Aucune commande de partenaire parasite`);
      console.log(`   - Aucune ≈ìuvre visible`);
      console.log(`   - Aucun auteur visible`);
      console.log(`   - Chiffre d'affaires correct`);
      console.log(`\nüí° Le dashboard repr√©sentant devrait maintenant afficher des donn√©es vides`);
    } else {
      console.log(`‚ö†Ô∏è ATTENTION: Certaines donn√©es parasites persistent`);
      console.log(`   - Commandes de partenaires: ${partnerOrders.length}`);
      console.log(`   - ≈íuvres visibles: ${works.length}`);
      console.log(`   - Auteurs visibles: ${authors.length}`);
    }

  } catch (error) {
    console.error("‚ùå Erreur lors du test:", error.message);
  } finally {
    if (prisma) {
      await prisma.$disconnect();
    }
  }
}

testRepresentativeAPIs();
