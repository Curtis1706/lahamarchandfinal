// Script pour v√©rifier la base de donn√©es et les donn√©es existantes
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkDatabase() {
  try {
    console.log("üîç V√©rification de la base de donn√©es...");
    
    // V√©rifier la connexion
    await prisma.$connect();
    console.log("‚úÖ Connexion √† la base de donn√©es r√©ussie");

    // V√©rifier les disciplines
    const disciplines = await prisma.discipline.findMany();
    console.log(`üìö Disciplines (${disciplines.length}):`, disciplines.map(d => ({ id: d.id, name: d.name })));

    // V√©rifier les utilisateurs
    const users = await prisma.user.findMany();
    console.log(`üë• Utilisateurs (${users.length}):`, users.map(u => ({ id: u.id, name: u.name, email: u.email, role: u.role })));

    // V√©rifier les ≈ìuvres existantes
    const works = await prisma.work.findMany();
    console.log(`üìñ ≈íuvres (${works.length}):`, works.map(w => ({ id: w.id, title: w.title, isbn: w.isbn, status: w.status })));

    // V√©rifier les notifications
    const notifications = await prisma.notification.findMany();
    console.log(`üîî Notifications (${notifications.length}):`, notifications.map(n => ({ id: n.id, title: n.title, type: n.type })));

    // V√©rifier les logs d'audit
    const auditLogs = await prisma.auditLog.findMany();
    console.log(`üìù Logs d'audit (${auditLogs.length}):`, auditLogs.map(a => ({ id: a.id, action: a.action, performedBy: a.performedBy })));

  } catch (error) {
    console.error("‚ùå Erreur lors de la v√©rification de la base de donn√©es:", error);
  } finally {
    await prisma.$disconnect();
  }
}

checkDatabase();


