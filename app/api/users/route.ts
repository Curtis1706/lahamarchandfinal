import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';

const prisma = new PrismaClient();

// POST /api/users - Cr√©er un utilisateur (pour le PDG)
export async function POST(request: NextRequest) {
  console.log("üîç API POST /users - Cr√©ation d'utilisateur");
  
  try {
    // V√©rifier l'authentification
    const session = await getServerSession(authOptions);
    if (!session?.user) {
      console.log("‚ùå Non authentifi√©");
      return NextResponse.json({ error: "Non authentifi√©" }, { status: 401 });
    }

    // V√©rifier que l'utilisateur est PDG
    if (session.user.role !== 'PDG') {
      console.log("‚ùå Acc√®s refus√© - R√¥le:", session.user.role);
      return NextResponse.json({ error: "Acc√®s refus√© - Seul le PDG peut cr√©er des utilisateurs" }, { status: 403 });
    }

    console.log("‚úÖ PDG authentifi√©:", session.user.email, "Cr√©ation d'utilisateur autoris√©e");
    const body = await request.json();
    console.log("üîç Body re√ßu:", body);
    
    const { 
      name, 
      email, 
      phone, 
      role, 
      disciplineId, 
      password 
    } = body;

    console.log("üîç Donn√©es extraites:", { name, email, phone, role, disciplineId });

    // Validation des champs obligatoires
    if (!name || !email || !phone || !role || !password) {
      return NextResponse.json(
        { error: "Tous les champs sont obligatoires" },
        { status: 400 }
      );
    }

    // Validation du r√¥le - Le PDG peut cr√©er tous les r√¥les
    const validRoles = ["PDG", "AUTEUR", "CONCEPTEUR", "PARTENAIRE", "REPRESENTANT", "CLIENT", "LIVREUR"];
    if (!validRoles.includes(role)) {
      return NextResponse.json(
        { error: "R√¥le invalide. R√¥les valides: " + validRoles.join(", ") },
        { status: 400 }
      );
    }

    // V√©rifier que l'email n'existe pas d√©j√†
    const existingUser = await prisma.user.findUnique({
      where: { email }
    });

    if (existingUser) {
      return NextResponse.json(
        { error: "Un utilisateur avec cet email existe d√©j√†" },
        { status: 400 }
      );
    }

    // V√©rifier que le t√©l√©phone n'existe pas d√©j√†
    const existingPhone = await prisma.user.findFirst({
      where: { phone }
    });

    if (existingPhone) {
      return NextResponse.json(
        { error: "Un utilisateur avec ce num√©ro de t√©l√©phone existe d√©j√†" },
        { status: 400 }
      );
    }

    // V√©rifier que la discipline existe si fournie
    if (disciplineId) {
      const discipline = await prisma.discipline.findUnique({
        where: { id: disciplineId }
      });

      if (!discipline) {
        return NextResponse.json(
          { error: "Discipline non trouv√©e" },
          { status: 400 }
        );
      }
    }

    console.log("üîç Tentative de cr√©ation avec Prisma...");

    // Hasher le mot de passe
    const hashedPassword = await bcrypt.hash(password, 12);

    // Cr√©er l'utilisateur
    const user = await prisma.user.create({
      data: {
        name: name.trim(),
        email: email.trim().toLowerCase(),
        phone: phone.trim(),
        password: hashedPassword,
        role: role,
        status: "ACTIVE", // Actif directement car cr√©√© par le PDG
        discipline: disciplineId ? {
          connect: { id: disciplineId }
        } : undefined,
      },
      include: {
        discipline: {
          select: {
            id: true,
            name: true
          }
        }
      }
    });

    console.log("‚úÖ Utilisateur cr√©√©, ajout des logs et notifications...");

    // Cr√©er un log d'audit
    try {
      await prisma.auditLog.create({
        data: {
          action: "USER_CREATE",
          userId: user.id,
          performedBy: session.user.id, // Cr√©√© par le PDG
          details: `Utilisateur ${user.name} (${user.role}) cr√©√© par le PDG ${session.user.name}`,
          metadata: JSON.stringify({
            userId: user.id,
            userName: user.name,
            userEmail: user.email,
            userRole: user.role,
            discipline: user.discipline?.name,
            status: "ACTIVE",
            createdBy: session.user.name,
            createdByEmail: session.user.email
          })
        }
      });
      console.log("‚úÖ Log d'audit cr√©√©");
    } catch (auditError) {
      console.error("‚ö†Ô∏è Erreur cr√©ation log d'audit:", auditError);
    }

    // Cr√©er une notification pour le PDG (utilisateur cr√©√© directement)
    try {
      const pdgUser = await prisma.user.findFirst({
        where: { role: "PDG" }
      });

      if (pdgUser) {
        await prisma.notification.create({
          data: {
            userId: pdgUser.id,
            title: "Nouvel utilisateur cr√©√©",
            message: `Un nouveau compte ${role.toLowerCase()} a √©t√© cr√©√© par le PDG: ${user.name} (${user.email}).`,
            type: "USER_CREATED",
            data: JSON.stringify({
              userId: user.id,
              userName: user.name,
              userEmail: user.email,
              userRole: user.role,
              discipline: user.discipline?.name
            })
          }
        });
        console.log("‚úÖ Notification cr√©√©e pour le PDG");
      }
    } catch (notificationError) {
      console.error("‚ö†Ô∏è Erreur cr√©ation notification:", notificationError);
    }

    // Cr√©er une notification pour l'utilisateur
    try {
      await prisma.notification.create({
        data: {
          userId: user.id,
          title: "Compte cr√©√© avec succ√®s",
          message: `Votre compte ${role.toLowerCase()} a √©t√© cr√©√© par l'administrateur et est maintenant actif.`,
          type: "USER_ACCOUNT_CREATED",
          data: JSON.stringify({
            userId: user.id,
            userRole: user.role,
            status: "ACTIVE"
          })
        }
      });
      console.log("‚úÖ Notification cr√©√©e pour l'utilisateur");
    } catch (notificationError) {
      console.error("‚ö†Ô∏è Erreur cr√©ation notification utilisateur:", notificationError);
    }

    console.log("‚úÖ Utilisateur cr√©√© avec succ√®s:", user);
    
    // Retourner les donn√©es sans le mot de passe
    const { password: _, ...userWithoutPassword } = user;
    
    return NextResponse.json({
      success: true,
      message: "Compte cr√©√© avec succ√®s. Il est en attente de validation par l'administrateur.",
      user: userWithoutPassword
    }, { status: 201 });
    
  } catch (error: any) {
    console.error("‚ùå Erreur cr√©ation utilisateur:", error);
    console.error("‚ùå Stack:", error.stack);
    
    // Gestion sp√©cifique des erreurs Prisma
    if (error.code === 'P2002') {
      return NextResponse.json(
        { error: "Un utilisateur avec cet email ou ce t√©l√©phone existe d√©j√†" },
        { status: 400 }
      );
    }
    
    return NextResponse.json(
      { error: "Erreur lors de la cr√©ation du compte: " + error.message },
      { status: 500 }
    );
  }
}

// GET /api/users - R√©cup√©rer les utilisateurs (pour le PDG)
export async function GET(request: NextRequest) {
  console.log("üîç API GET /users - R√©cup√©ration des utilisateurs");
  
  try {
    // V√©rifier l'authentification
    const session = await getServerSession(authOptions);
    if (!session?.user) {
      console.log("‚ùå Non authentifi√©");
      return NextResponse.json({ error: "Non authentifi√©" }, { status: 401 });
    }

    // V√©rifier que l'utilisateur est PDG
    if (session.user.role !== 'PDG') {
      console.log("‚ùå Acc√®s refus√© - R√¥le:", session.user.role);
      return NextResponse.json({ error: "Acc√®s refus√© - Seul le PDG peut acc√©der √† cette ressource" }, { status: 403 });
    }

    console.log("‚úÖ Utilisateur authentifi√©:", session.user.email, "R√¥le:", session.user.role);
    const { searchParams } = new URL(request.url);
    const role = searchParams.get('role');
    const status = searchParams.get('status');
    const search = searchParams.get('search');

    // Construire les filtres
    const where: any = {};
    
    if (role) {
      where.role = role;
    }
    
    if (status) {
      where.status = status;
    }
    
    if (search) {
      where.OR = [
        { name: { contains: search, mode: 'insensitive' } },
        { email: { contains: search, mode: 'insensitive' } },
        { phone: { contains: search, mode: 'insensitive' } }
      ];
    }

    const users = await prisma.user.findMany({
      where,
      include: {
        discipline: {
      select: {
        id: true,
            name: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    // Retourner les utilisateurs sans les mots de passe
    const usersWithoutPasswords = users.map(user => {
      const { password, ...userWithoutPassword } = user;
      return userWithoutPassword;
    });

    console.log(`‚úÖ ${usersWithoutPasswords.length} utilisateurs r√©cup√©r√©s`);
    
    return NextResponse.json({
      users: usersWithoutPasswords,
      total: usersWithoutPasswords.length
    });
    
  } catch (error: any) {
    console.error("‚ùå Erreur r√©cup√©ration utilisateurs:", error);
    
    return NextResponse.json(
      { error: "Erreur lors de la r√©cup√©ration des utilisateurs: " + error.message },
      { status: 500 }
    );
  }
}

// PUT /api/users - Mettre √† jour un utilisateur
export async function PUT(request: NextRequest) {
  console.log("üîç API PUT /users - Mise √† jour d'utilisateur");
  
  try {
    const body = await request.json();
    const { id, ...updateData } = body;

    if (!id) {
      return NextResponse.json(
        { error: "ID utilisateur requis" },
        { status: 400 }
      );
    }

    // V√©rifier que l'utilisateur existe
    const existingUser = await prisma.user.findUnique({
      where: { id }
    });

    if (!existingUser) {
      return NextResponse.json(
        { error: "Utilisateur non trouv√©" },
        { status: 404 }
      );
    }

    // Hasher le mot de passe si fourni
    if (updateData.password) {
      updateData.password = await bcrypt.hash(updateData.password, 12);
    }

    // Mettre √† jour l'utilisateur
    const updatedUser = await prisma.user.update({
      where: { id },
      data: updateData,
      include: {
        discipline: {
      select: {
        id: true,
            name: true
          }
        }
      }
    });

    console.log("‚úÖ Utilisateur mis √† jour:", updatedUser);

    // Retourner sans le mot de passe
    const { password, ...userWithoutPassword } = updatedUser;
    
    return NextResponse.json({
      success: true,
      user: userWithoutPassword
    });
    
  } catch (error: any) {
    console.error("‚ùå Erreur mise √† jour utilisateur:", error);
    
    return NextResponse.json(
      { error: "Erreur lors de la mise √† jour: " + error.message },
      { status: 500 }
    );
  }
}

// DELETE /api/users - Supprimer un utilisateur
export async function DELETE(request: NextRequest) {
  console.log("üîç API DELETE /users - Suppression d'utilisateur");
  
  try {
    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');

    if (!id) {
      return NextResponse.json(
        { error: "ID utilisateur requis" },
        { status: 400 }
      );
    }

    // V√©rifier que l'utilisateur existe
    const existingUser = await prisma.user.findUnique({
      where: { id }
    });

    if (!existingUser) {
      return NextResponse.json(
        { error: "Utilisateur non trouv√©" },
        { status: 404 }
      );
    }

    // Supprimer l'utilisateur
    await prisma.user.delete({
      where: { id }
    });

    console.log("‚úÖ Utilisateur supprim√©:", id);
    
    return NextResponse.json({
      success: true,
      message: "Utilisateur supprim√© avec succ√®s"
    });
    
  } catch (error: any) {
    console.error("‚ùå Erreur suppression utilisateur:", error);
    
    return NextResponse.json(
      { error: "Erreur lors de la suppression: " + error.message },
      { status: 500 }
    );
  }
}