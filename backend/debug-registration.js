const { PrismaClient } = require('@prisma/client')
const bcryptjs = require('bcryptjs')

async function debugRegistration() {
  // Utiliser votre vraie URL Neon
  process.env.DATABASE_URL = "postgresql://neondb_owner:npg_wIlBvmJV64xW@ep-late-credit-ad8o01yi-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require"
  const prisma = new PrismaClient()
  
  try {
    console.log('üîç Diagnostic de l\'inscription...')
    
    // Test 1: Connexion √† la base de donn√©es
    console.log('\n1. Test de connexion √† la base de donn√©es...')
    await prisma.$connect()
    console.log('‚úÖ Connexion r√©ussie')
    
    // Test 2: V√©rifier les tables
    console.log('\n2. V√©rification des tables...')
    const userCount = await prisma.user.count()
    console.log(`‚úÖ Table User: ${userCount} utilisateurs`)
    
    const disciplineCount = await prisma.discipline.count()
    console.log(`‚úÖ Table Discipline: ${disciplineCount} disciplines`)
    
    // Test 3: V√©rifier le sch√©ma User
    console.log('\n3. Test du sch√©ma User...')
    const userSchema = await prisma.user.findFirst({
      select: {
        id: true,
        name: true,
        email: true,
        role: true,
        disciplineId: true,
        emailVerified: true,
        createdAt: true
      }
    })
    console.log('‚úÖ Sch√©ma User OK')
    
    // Test 4: Test de cr√©ation d'utilisateur
    console.log('\n4. Test de cr√©ation d\'utilisateur...')
    const testEmail = `test-${Date.now()}@example.com`
    const hashedPassword = await bcryptjs.hash('testpassword123', 10)
    
    const testUser = await prisma.user.create({
      data: {
        name: 'Test User',
        email: testEmail,
        password: hashedPassword,
        role: 'CLIENT',
        emailVerified: new Date()
      },
      select: {
        id: true,
        name: true,
        email: true,
        role: true,
        createdAt: true
      }
    })
    console.log('‚úÖ Test de cr√©ation r√©ussi:', testUser.email)
    
    // Nettoyer
    await prisma.user.delete({
      where: { id: testUser.id }
    })
    console.log('‚úÖ Test utilisateur supprim√©')
    
    // Test 5: V√©rifier les r√¥les
    console.log('\n5. V√©rification des r√¥les...')
    const validRoles = ['PDG', 'REPRESENTANT', 'CONCEPTEUR', 'AUTEUR', 'PARTENAIRE', 'CLIENT']
    console.log('‚úÖ R√¥les valides:', validRoles)
    
    console.log('\nüéâ Tous les tests sont pass√©s!')
    console.log('\nüí° Le probl√®me pourrait √™tre:')
    console.log('- Donn√©es manquantes dans la requ√™te')
    console.log('- Validation c√¥t√© client')
    console.log('- Probl√®me de CORS')
    console.log('- Timeout de la requ√™te')
    
  } catch (error) {
    console.error('\n‚ùå Erreur d√©tect√©e:', error.message)
    console.error('Code d\'erreur:', error.code)
    console.error('Stack:', error.stack)
    
    if (error.code === 'P2021') {
      console.log('\nüí° Solution: Table User n\'existe pas')
      console.log('Ex√©cutez: npx prisma migrate deploy')
    } else if (error.code === 'P1001') {
      console.log('\nüí° Solution: Impossible de se connecter √† la base de donn√©es')
      console.log('V√©rifiez DATABASE_URL')
    } else if (error.code === 'P2002') {
      console.log('\nüí° Solution: Contrainte d\'unicit√© viol√©e')
    } else if (error.code === 'P2003') {
      console.log('\nüí° Solution: Cl√© √©trang√®re invalide')
    }
    
  } finally {
    await prisma.$disconnect()
  }
}

debugRegistration()
