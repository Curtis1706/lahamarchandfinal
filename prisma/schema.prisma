  // This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String
  email           String    @unique
  phone           String?   // Numéro de téléphone
  emailVerified   DateTime? // Changé en DateTime? pour stocker quand l'email a été validé
  image           String?
  password        String
  role            Role
  status          UserStatus @default(PENDING) // Statut de validation
  disciplineId    String?   // Ajout du champ disciplineId
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  authoredWorks     Work[]        @relation("AuthorWorks")
  conceivedWorks    Work[]        @relation("ConceptorWorks")
  reviewedWorks     Work[]        @relation("ReviewedWorks")
  conceivedProjects Project[]     @relation("ConceptorProjects")
  reviewedProjects  Project[]     @relation("ReviewedProjects")
  partner           Partner?      
  partnerClients    Partner[]     @relation("PartnerRepresentant")
  orders            Order[]
  royalties         Royalty[]
  notifications     Notification[]
  sentMessages      Message[]     @relation("SentMessages")
  receivedMessages  Message[]     @relation("ReceivedMessages")
  discipline        Discipline?   @relation(fields: [disciplineId], references: [id]) // Relation avec Discipline
  performedStockMovements StockMovement[] @relation("StockMovements")
  createdWorkVersions WorkVersion[] // Versions d'œuvres créées par cet utilisateur
  workSales        WorkSale[] // Ventes effectuées par cet utilisateur
  workViews        WorkView[] // Consultations d'œuvres par cet utilisateur
  createdAlertRules StockAlertRule[] // Règles d'alerte créées par cet utilisateur
  resolvedAlerts  StockAlert[] // Alertes résolues par cet utilisateur
  createdReports  StockReport[] // Rapports créés par cet utilisateur
  createdIntegrations StockIntegration[] // Intégrations créées par cet utilisateur

  // NextAuth relations
  accounts        Account[]
  sessions        Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Project {
  id                    String        @id @default(cuid())
  title                 String
  description           String?
  objectives            String?       // Objectifs du projet
  expectedDeliverables  String?       // Livrables attendus
  requiredResources     String?       // Ressources nécessaires
  timeline              String?       // Planning prévisionnel
  rejectionReason       String?       // Motif de refus (si rejeté)
  discipline            Discipline    @relation(fields: [disciplineId], references: [id])
  disciplineId          String
  status                ProjectStatus @default(DRAFT)
  submittedAt           DateTime?
  reviewedAt            DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Relations
  concepteurId String
  concepteur   User         @relation("ConceptorProjects", fields: [concepteurId], references: [id])
  reviewerId   String?
  reviewer     User?        @relation("ReviewedProjects", fields: [reviewerId], references: [id])
  
  // Relation vers les œuvres créées (un projet peut générer plusieurs œuvres)
  works        Work[]       @relation("ProjectWorks")
}

model Work {
  id           String     @id @default(cuid())
  title        String
  description  String?    // Description détaillée de l'œuvre
  isbn         String     @unique
  internalCode String?    // Code interne pour la gestion PDG
  price        Float      @default(0)
  tva          Float      @default(0.18) // 18% TVA par défaut
  discountRate Float?     // Taux de remise applicable (en %)
  stock        Int        @default(0)
  minStock     Int        @default(10) // Seuil d'alerte de stock faible
  maxStock     Int?       // Stock maximum recommandé
  physicalStock Int       @default(0) // Stock physique réel
  
  // Nouveaux champs pour le workflow amélioré
  category               String?    // Catégorie de l'œuvre
  targetAudience        String?    // Public cible
  educationalObjectives String?    // Objectifs pédagogiques
  contentType           String?    // Type de contenu (manuel, cahier, etc.)
  keywords              String?    // Mots-clés séparés par des virgules
  files                 String?    // JSON des fichiers associés
  
  // Validation et commentaires
  validationComment     String?    // Commentaire du PDG lors de la validation
  rejectionReason       String?    // Raison du refus si rejeté
  
  discipline   Discipline @relation(fields: [disciplineId], references: [id])
  disciplineId String
  status       WorkStatus @default(PENDING) // Changé par défaut à PENDING
  publishedAt  DateTime?  // Nullable, défini seulement lors de la publication
  publicationDate DateTime? // Date de publication pour le stock (peut différer de publishedAt)
  version      String?    // Version de l'œuvre (ex: "1.0", "2.0", "Édition 2024")
  submittedAt  DateTime?  // Date de soumission
  reviewedAt   DateTime?  // Date de validation/refus
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt

  // Relations
  authorId     String      // Obligatoire - seuls les auteurs peuvent créer des œuvres
  author       User        @relation("AuthorWorks", fields: [authorId], references: [id])
  reviewerId   String?     // PDG qui a validé/refusé
  reviewer     User?       @relation("ReviewedWorks", fields: [reviewerId], references: [id])
  
  // Relation vers le concepteur (optionnelle - pour les œuvres rattachées à un projet)
  concepteurId String?
  concepteur   User?       @relation("ConceptorWorks", fields: [concepteurId], references: [id])
  
  // Relation vers le projet d'origine (optionnelle - pour les œuvres créées à partir de projets)
  projectId    String?
  project      Project?    @relation("ProjectWorks", fields: [projectId], references: [id])
  
  sales        Sale[]
  orderItems   OrderItem[]
  royalties    Royalty[]
  stockMovements StockMovement[]
  versions     WorkVersion[]
  workSales    WorkSale[]
  workDistributions WorkDistribution[]
  workViews    WorkView[]
  stockAlerts  StockAlert[]
  partnerStocks PartnerStock[] // Stock alloué aux partenaires
}

model StockMovement {
  id          String           @id @default(cuid())
  workId      String
  work        Work             @relation(fields: [workId], references: [id])
  type        StockMovementType
  quantity    Int              // Quantité positive pour ajout, négative pour retrait
  reason      String?          // Raison du mouvement (vente, réimpression, ajustement, etc.)
  reference   String?          // Référence (ID de commande, numéro de facture, etc.)
  performedBy String?          // ID de l'utilisateur qui a effectué le mouvement
  performedByUser User?        @relation("StockMovements", fields: [performedBy], references: [id])
  partnerId   String?          // ID du partenaire si mouvement lié à un partenaire
  partner     Partner?         @relation(fields: [partnerId], references: [id])
  source      String?          // Source du mouvement (imprimerie, fournisseur, etc.)
  destination String?          // Destination du mouvement (partenaire, client, etc.)
  unitPrice   Float?           // Prix unitaire au moment du mouvement
  totalAmount Float?           // Montant total du mouvement
  isCorrection Boolean        @default(false) // Indique si c'est une correction PDG
  correctionReason String?     // Raison de la correction
  createdAt   DateTime         @default(now())
  
  @@index([workId])
  @@index([type])
  @@index([createdAt])
  @@index([partnerId])
  @@index([isCorrection])
}

model Discipline {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?   // Description de la discipline
  isActive    Boolean   @default(true) // Statut actif/inactif
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  projects    Project[]
  works       Work[]
  users       User[]    // Relation avec les utilisateurs (concepteurs)
}

model Sale {
  id        String   @id @default(cuid())
  workId    String
  work      Work     @relation(fields: [workId], references: [id])
  quantity  Int
  amount    Float
  createdAt DateTime @default(now())
}

model Partner {
  id          String   @id @default(cuid())
  name        String   // Nom de l'organisation
  type        String   // Type: école, librairie, institution, maison d'édition, association
  address     String?  // Adresse complète
  phone       String?  // Téléphone
  email       String?  // Email de contact
  contact     String?  // Personne de contact
  website     String?  // Site web
  description String?  // Description de l'organisation
  representantId String? // ID du représentant assigné
  representant User? @relation("PartnerRepresentant", fields: [representantId], references: [id])
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  orders      Order[]  @relation("PartnerOrders")
  stockItems  PartnerStock[] // Stock alloué au partenaire
  stockMovements StockMovement[] // Mouvements de stock du partenaire
}

model PartnerStock {
  id          String   @id @default(cuid())
  partnerId   String
  partner     Partner  @relation(fields: [partnerId], references: [id])
  workId      String
  work        Work     @relation(fields: [workId], references: [id])
  allocatedQuantity Int // Quantité allouée au partenaire
  soldQuantity      Int @default(0) // Quantité vendue
  returnedQuantity  Int @default(0) // Quantité retournée
  availableQuantity Int // Quantité disponible (allouée - vendue - retournée)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([partnerId, workId]) // Un seul enregistrement par partenaire/œuvre
  @@index([partnerId])
  @@index([workId])
}

model Order {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  partnerId String?  // ID du partenaire si c'est une commande partenaire
  partner   Partner? @relation("PartnerOrders", fields: [partnerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  status    OrderStatus @default(PENDING)

  // Relations
  items     OrderItem[]
}

model OrderItem {
  id       String @id @default(cuid())
  orderId  String
  order    Order  @relation(fields: [orderId], references: [id])
  workId   String
  work     Work   @relation(fields: [workId], references: [id])
  quantity Int
  price    Float
}

model Royalty {
  id        String   @id @default(cuid())
  workId    String
  work      Work     @relation(fields: [workId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  amount    Float
  paid      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Message {
  id          String   @id @default(cuid())
  subject     String
  content     String
  type        String   @default("MESSAGE") // MESSAGE, SYSTEM, NOTIFICATION
  read        Boolean  @default(false)
  readAt      DateTime?
  senderId    String
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  recipientId String
  recipient   User     @relation("ReceivedMessages", fields: [recipientId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  PDG
  REPRESENTANT
  CONCEPTEUR
  AUTEUR
  PARTENAIRE
  CLIENT
}

enum UserStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ProjectStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  ACCEPTED
  REJECTED
}

enum WorkStatus {
  DRAFT
  PENDING
  PUBLISHED
  REJECTED
  ON_SALE
  OUT_OF_STOCK
  DISCONTINUED
}

enum OrderStatus {
  PENDING
  VALIDATED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum StockMovementType {
  INBOUND        // Entrée de stock (réimpression, réception)
  OUTBOUND       // Sortie de stock (vente, retrait)
  ADJUSTMENT     // Ajustement de stock (inventaire, correction)
  TRANSFER       // Transfert entre entrepôts
  DAMAGED        // Stock endommagé
  EXPIRED        // Stock expiré
  PARTNER_ALLOCATION // Allocation de stock à un partenaire
  PARTNER_SALE   // Vente par un partenaire
  PARTNER_RETURN // Retour de stock par un partenaire
  DIRECT_SALE    // Vente directe au siège
  CORRECTION     // Correction PDG (droit exclusif)
  INVENTORY      // Ajustement suite à inventaire
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  title     String
  message   String
  type      String   // Type de notification (STOCK_UPDATE, ORDER_UPDATE, etc.)
  data      String?  // Données JSON additionnelles
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}

model AuditLog {
  id          String   @id @default(cuid())
  action       String   // Type d'action (VALIDATE_CONCEPTEUR, SUSPEND_USER, etc.)
  userId       String?  // ID de l'utilisateur concerné
  performedBy  String   // Qui a effectué l'action (PDG, etc.)
  details      String   // Description textuelle de l'action
  metadata     String?  // Métadonnées JSON de l'action (optionnel)
  createdAt    DateTime @default(now())
}

model WorkVersion {
  id          String   @id @default(cuid())
  workId      String
  work        Work     @relation(fields: [workId], references: [id], onDelete: Cascade)
  version     String   // Version (ex: "1.0", "2.0", "Édition 2024")
  title       String   // Titre de cette version
  description String?  // Description des changements
  isActive    Boolean  @default(true) // Version active ou archivée
  publishedAt DateTime? // Date de publication de cette version
  archivedAt  DateTime? // Date d'archivage
  createdBy   String   // ID de l'utilisateur qui a créé cette version
  createdByUser User   @relation(fields: [createdBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([workId])
  @@index([version])
  @@index([isActive])
}

model WorkSale {
  id          String   @id @default(cuid())
  workId      String
  work        Work     @relation(fields: [workId], references: [id], onDelete: Cascade)
  quantity    Int      // Quantité vendue
  amount      Float    // Montant total de la vente
  saleType    SaleType @default(DIRECT) // Type de vente
  customerId  String?  // ID du client (optionnel)
  customer    User?    @relation(fields: [customerId], references: [id])
  orderId     String?  // ID de la commande (optionnel)
  saleDate    DateTime @default(now())
  createdAt   DateTime @default(now())
  
  @@index([workId])
  @@index([saleDate])
  @@index([saleType])
}

model WorkDistribution {
  id              String           @id @default(cuid())
  workId          String
  work            Work             @relation(fields: [workId], references: [id], onDelete: Cascade)
  quantity        Int              // Quantité distribuée
  distributionType DistributionType @default(SCHOOL) // Type de distribution
  recipientId     String?          // ID du destinataire (école, partenaire, etc.)
  recipientName   String?          // Nom du destinataire
  distributionDate DateTime        @default(now())
  notes           String?          // Notes sur la distribution
  createdAt       DateTime         @default(now())
  
  @@index([workId])
  @@index([distributionDate])
  @@index([distributionType])
}

model WorkView {
  id        String   @id @default(cuid())
  workId    String
  work      Work     @relation(fields: [workId], references: [id], onDelete: Cascade)
  viewerId  String?  // ID de l'utilisateur qui a consulté (optionnel)
  viewer    User?    @relation(fields: [viewerId], references: [id])
  ipAddress String?  // Adresse IP (pour les consultations anonymes)
  userAgent String?  // User agent du navigateur
  viewedAt  DateTime @default(now())
  
  @@index([workId])
  @@index([viewedAt])
  @@index([viewerId])
}

enum SaleType {
  DIRECT      // Vente directe
  ONLINE      // Vente en ligne
  PARTNER     // Vente via partenaire
  SCHOOL      // Vente à une école
  BULK        // Vente en gros
}

enum DistributionType {
  SCHOOL      // Distribution à une école
  LIBRARY     // Distribution à une bibliothèque
  PARTNER     // Distribution à un partenaire
  PROMOTION   // Distribution promotionnelle
  SAMPLE      // Échantillon gratuit
}

model StockAlertRule {
  id              String        @id @default(cuid())
  name            String        // Nom de la règle
  description     String?       // Description de la règle
  type            AlertRuleType // Type de règle
  conditions      String        // Conditions JSON
  actions         String        // Actions JSON
  isActive        Boolean       @default(true)
  priority        AlertPriority @default(MEDIUM)
  createdBy       String        // ID de l'utilisateur qui a créé la règle
  createdByUser   User          @relation(fields: [createdBy], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  triggeredAlerts StockAlert[]  @relation("AlertRule")
  
  @@index([type])
  @@index([isActive])
  @@index([priority])
}

model StockAlert {
  id          String        @id @default(cuid())
  ruleId      String?       // ID de la règle qui a déclenché l'alerte
  rule        StockAlertRule? @relation("AlertRule", fields: [ruleId], references: [id])
  workId      String?       // ID de l'œuvre concernée (optionnel)
  work        Work?         @relation(fields: [workId], references: [id])
  type        AlertType     // Type d'alerte
  severity    AlertSeverity // Sévérité de l'alerte
  title       String        // Titre de l'alerte
  message     String        // Message de l'alerte
  data        String?       // Données JSON supplémentaires
  isRead      Boolean       @default(false)
  isResolved  Boolean       @default(false)
  resolvedBy  String?       // ID de l'utilisateur qui a résolu l'alerte
  resolvedByUser User?      @relation(fields: [resolvedBy], references: [id])
  resolvedAt  DateTime?     // Date de résolution
  createdAt   DateTime      @default(now())
  
  @@index([type])
  @@index([severity])
  @@index([isRead])
  @@index([isResolved])
  @@index([createdAt])
}

model StockReport {
  id          String        @id @default(cuid())
  name        String        // Nom du rapport
  type        ReportType    // Type de rapport
  parameters  String        // Paramètres JSON
  schedule    String?       // Planification (cron expression)
  isActive    Boolean       @default(true)
  lastRun     DateTime?     // Dernière exécution
  nextRun     DateTime?     // Prochaine exécution
  createdBy   String        // ID de l'utilisateur qui a créé le rapport
  createdByUser User        @relation(fields: [createdBy], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  executions  ReportExecution[] @relation("Report")
  
  @@index([type])
  @@index([isActive])
  @@index([nextRun])
}

model ReportExecution {
  id          String        @id @default(cuid())
  reportId    String
  report      StockReport   @relation("Report", fields: [reportId], references: [id])
  status      ExecutionStatus // Statut d'exécution
  startedAt   DateTime      @default(now())
  completedAt DateTime?     // Date de fin
  result      String?       // Résultat JSON
  error       String?       // Message d'erreur
  filePath    String?       // Chemin du fichier généré
  
  @@index([reportId])
  @@index([status])
  @@index([startedAt])
}

model StockIntegration {
  id          String        @id @default(cuid())
  name        String        // Nom de l'intégration
  type        IntegrationType // Type d'intégration
  config      String        // Configuration JSON
  isActive    Boolean       @default(true)
  lastSync    DateTime?     // Dernière synchronisation
  syncStatus  SyncStatus    @default(PENDING)
  errorCount  Int           @default(0)
  lastError   String?       // Dernière erreur
  createdBy   String        // ID de l'utilisateur qui a créé l'intégration
  createdByUser User        @relation(fields: [createdBy], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  @@index([type])
  @@index([isActive])
  @@index([syncStatus])
}

enum AlertRuleType {
  STOCK_LOW           // Stock faible
  STOCK_OUT           // Rupture de stock
  SALES_THRESHOLD     // Seuil de ventes
  PRICE_CHANGE        // Changement de prix
  EXPIRY_WARNING      // Avertissement d'expiration
  CUSTOM              // Règle personnalisée
}

enum AlertPriority {
  LOW       // Faible
  MEDIUM    // Moyenne
  HIGH      // Élevée
  CRITICAL  // Critique
}

enum AlertType {
  STOCK_LOW           // Stock faible
  STOCK_OUT           // Rupture de stock
  SALES_SPIKE         // Pic de ventes
  PRICE_CHANGE        // Changement de prix
  EXPIRY_WARNING      // Avertissement d'expiration
  INTEGRATION_ERROR   // Erreur d'intégration
  REPORT_FAILED       // Échec de rapport
  CUSTOM              // Alerte personnalisée
}

enum AlertSeverity {
  INFO      // Information
  WARNING   // Avertissement
  ERROR     // Erreur
  CRITICAL  // Critique
}

enum ReportType {
  INVENTORY_SUMMARY   // Résumé d'inventaire
  SALES_ANALYSIS      // Analyse des ventes
  STOCK_MOVEMENTS     // Mouvements de stock
  ALERTS_SUMMARY      // Résumé des alertes
  CUSTOM              // Rapport personnalisé
}

enum ExecutionStatus {
  PENDING    // En attente
  RUNNING    // En cours
  COMPLETED  // Terminé
  FAILED     // Échoué
  CANCELLED  // Annulé
}

enum IntegrationType {
  ORDER_SYSTEM        // Système de commandes
  ACCOUNTING_SYSTEM   // Système comptable
  WAREHOUSE_SYSTEM    // Système d'entrepôt
  ECOMMERCE_PLATFORM  // Plateforme e-commerce
  CUSTOM              // Intégration personnalisée
}

enum SyncStatus {
  PENDING    // En attente
  SYNCING    // Synchronisation
  SUCCESS    // Succès
  FAILED     // Échec
  DISABLED   // Désactivé
}