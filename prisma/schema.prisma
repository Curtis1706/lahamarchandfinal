generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String             @id @default(cuid())
  name                    String
  email                   String             @unique
  phone                   String?
  emailVerified           DateTime?
  image                   String?
  password                String
  role                    Role
  status                  UserStatus         @default(PENDING)
  disciplineId            String?
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  accounts                Account[]
  receivedMessages        Message[]          @relation("ReceivedMessages")
  sentMessages            Message[]          @relation("SentMessages")
  notifications           Notification[]
  orders                  Order[]
  partnerClients          Partner[]          @relation("PartnerRepresentant")
  partner                 Partner?
  conceivedProjects       Project[]          @relation("ConceptorProjects")
  reviewedProjects        Project[]          @relation("ReviewedProjects")
  royalties               Royalty[]
  sessions                Session[]
  resolvedAlerts          StockAlert[]
  createdAlertRules       StockAlertRule[]
  createdIntegrations     StockIntegration[]
  performedStockMovements StockMovement[]    @relation("StockMovements")
  createdReports          StockReport[]
  discipline              Discipline?        @relation(fields: [disciplineId], references: [id])
  authoredWorks           Work[]             @relation("AuthorWorks")
  conceivedWorks          Work[]             @relation("ConceptorWorks")
  reviewedWorks           Work[]             @relation("ReviewedWorks")
  workSales               WorkSale[]
  createdWorkVersions     WorkVersion[]
  workViews               WorkView[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id                   String        @id @default(cuid())
  title                String
  description          String?
  objectives           String?
  expectedDeliverables String?
  requiredResources    String?
  timeline             String?
  rejectionReason      String?
  disciplineId         String
  status               ProjectStatus @default(DRAFT)
  submittedAt          DateTime?
  reviewedAt           DateTime?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  concepteurId         String
  reviewerId           String?
  concepteur           User          @relation("ConceptorProjects", fields: [concepteurId], references: [id])
  discipline           Discipline    @relation(fields: [disciplineId], references: [id])
  reviewer             User?         @relation("ReviewedProjects", fields: [reviewerId], references: [id])
  works                Work[]        @relation("ProjectWorks")
}

model Work {
  id                    String             @id @default(cuid())
  title                 String
  description           String?
  isbn                  String             @unique
  internalCode          String?
  price                 Float              @default(0)
  tva                   Float              @default(0.18)
  discountRate          Float?
  stock                 Int                @default(0)
  minStock              Int                @default(10)
  maxStock              Int?
  physicalStock         Int                @default(0)
  category              String?
  targetAudience        String?
  educationalObjectives String?
  contentType           String?
  keywords              String?
  files                 String?
  validationComment     String?
  rejectionReason       String?
  disciplineId          String
  status                WorkStatus         @default(PENDING)
  publishedAt           DateTime?
  publicationDate       DateTime?
  version               String?
  submittedAt           DateTime?
  reviewedAt            DateTime?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @default(now()) @updatedAt
  authorId              String
  reviewerId            String?
  concepteurId          String?
  projectId             String?
  orderItems            OrderItem[]
  partnerStocks         PartnerStock[]
  royalties             Royalty[]
  sales                 Sale[]
  stockAlerts           StockAlert[]
  stockMovements        StockMovement[]
  author                User               @relation("AuthorWorks", fields: [authorId], references: [id])
  concepteur            User?              @relation("ConceptorWorks", fields: [concepteurId], references: [id])
  discipline            Discipline         @relation(fields: [disciplineId], references: [id])
  project               Project?           @relation("ProjectWorks", fields: [projectId], references: [id])
  reviewer              User?              @relation("ReviewedWorks", fields: [reviewerId], references: [id])
  workDistributions     WorkDistribution[]
  workSales             WorkSale[]
  versions              WorkVersion[]
  workViews             WorkView[]
}

model StockMovement {
  id               String            @id @default(cuid())
  workId           String
  type             StockMovementType
  quantity         Int
  reason           String?
  reference        String?
  performedBy      String?
  partnerId        String?
  source           String?
  destination      String?
  unitPrice        Float?
  totalAmount      Float?
  isCorrection     Boolean           @default(false)
  correctionReason String?
  createdAt        DateTime          @default(now())
  partner          Partner?          @relation(fields: [partnerId], references: [id])
  performedByUser  User?             @relation("StockMovements", fields: [performedBy], references: [id])
  work             Work              @relation(fields: [workId], references: [id])

  @@index([workId])
  @@index([type])
  @@index([createdAt])
  @@index([partnerId])
  @@index([isCorrection])
}

model Discipline {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projects    Project[]
  users       User[]
  works       Work[]
}

model Sale {
  id        String   @id @default(cuid())
  workId    String
  quantity  Int
  amount    Float
  createdAt DateTime @default(now())
  work      Work     @relation(fields: [workId], references: [id])
}

model Partner {
  id             String          @id @default(cuid())
  name           String
  type           String
  address        String?
  phone          String?
  email          String?
  contact        String?
  website        String?
  description    String?
  representantId String?
  userId         String          @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  orders         Order[]         @relation("PartnerOrders")
  representant   User?           @relation("PartnerRepresentant", fields: [representantId], references: [id])
  user           User            @relation(fields: [userId], references: [id])
  stockItems     PartnerStock[]
  stockMovements StockMovement[]
}

model PartnerStock {
  id                String   @id @default(cuid())
  partnerId         String
  workId            String
  allocatedQuantity Int
  soldQuantity      Int      @default(0)
  returnedQuantity  Int      @default(0)
  availableQuantity Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  partner           Partner  @relation(fields: [partnerId], references: [id])
  work              Work     @relation(fields: [workId], references: [id])

  @@unique([partnerId, workId])
  @@index([partnerId])
  @@index([workId])
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  partnerId String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  status    OrderStatus @default(PENDING)
  partner   Partner?    @relation("PartnerOrders", fields: [partnerId], references: [id])
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
}

model OrderItem {
  id       String @id @default(cuid())
  orderId  String
  workId   String
  quantity Int
  price    Float
  order    Order  @relation(fields: [orderId], references: [id])
  work     Work   @relation(fields: [workId], references: [id])
}

model Royalty {
  id        String   @id @default(cuid())
  workId    String
  userId    String
  amount    Float
  paid      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  work      Work     @relation(fields: [workId], references: [id])
}

model Message {
  id          String    @id @default(cuid())
  subject     String
  content     String
  type        String    @default("MESSAGE")
  read        Boolean   @default(false)
  readAt      DateTime?
  senderId    String
  recipientId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  recipient   User      @relation("ReceivedMessages", fields: [recipientId], references: [id])
  sender      User      @relation("SentMessages", fields: [senderId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  data      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

model AuditLog {
  id          String   @id @default(cuid())
  action      String
  userId      String?
  performedBy String
  details     String
  metadata    String?
  createdAt   DateTime @default(now())
}

model WorkVersion {
  id            String    @id @default(cuid())
  workId        String
  version       String
  title         String
  description   String?
  isActive      Boolean   @default(true)
  publishedAt   DateTime?
  archivedAt    DateTime?
  createdBy     String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdByUser User      @relation(fields: [createdBy], references: [id])
  work          Work      @relation(fields: [workId], references: [id], onDelete: Cascade)

  @@index([workId])
  @@index([version])
  @@index([isActive])
}

model WorkSale {
  id         String   @id @default(cuid())
  workId     String
  quantity   Int
  amount     Float
  saleType   SaleType @default(DIRECT)
  customerId String?
  orderId    String?
  saleDate   DateTime @default(now())
  createdAt  DateTime @default(now())
  customer   User?    @relation(fields: [customerId], references: [id])
  work       Work     @relation(fields: [workId], references: [id], onDelete: Cascade)

  @@index([workId])
  @@index([saleDate])
  @@index([saleType])
}

model WorkDistribution {
  id               String           @id @default(cuid())
  workId           String
  quantity         Int
  distributionType DistributionType @default(SCHOOL)
  recipientId      String?
  recipientName    String?
  distributionDate DateTime         @default(now())
  notes            String?
  createdAt        DateTime         @default(now())
  work             Work             @relation(fields: [workId], references: [id], onDelete: Cascade)

  @@index([workId])
  @@index([distributionDate])
  @@index([distributionType])
}

model WorkView {
  id        String   @id @default(cuid())
  workId    String
  viewerId  String?
  ipAddress String?
  userAgent String?
  viewedAt  DateTime @default(now())
  viewer    User?    @relation(fields: [viewerId], references: [id])
  work      Work     @relation(fields: [workId], references: [id], onDelete: Cascade)

  @@index([workId])
  @@index([viewedAt])
  @@index([viewerId])
}

model StockAlertRule {
  id              String        @id @default(cuid())
  name            String
  description     String?
  type            AlertRuleType
  conditions      String
  actions         String
  isActive        Boolean       @default(true)
  priority        AlertPriority @default(MEDIUM)
  createdBy       String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  triggeredAlerts StockAlert[]  @relation("AlertRule")
  createdByUser   User          @relation(fields: [createdBy], references: [id])

  @@index([type])
  @@index([isActive])
  @@index([priority])
}

model StockAlert {
  id             String          @id @default(cuid())
  ruleId         String?
  workId         String?
  type           AlertType
  severity       AlertSeverity
  title          String
  message        String
  data           String?
  isRead         Boolean         @default(false)
  isResolved     Boolean         @default(false)
  resolvedBy     String?
  resolvedAt     DateTime?
  createdAt      DateTime        @default(now())
  resolvedByUser User?           @relation(fields: [resolvedBy], references: [id])
  rule           StockAlertRule? @relation("AlertRule", fields: [ruleId], references: [id])
  work           Work?           @relation(fields: [workId], references: [id])

  @@index([type])
  @@index([severity])
  @@index([isRead])
  @@index([isResolved])
  @@index([createdAt])
}

model StockReport {
  id            String            @id @default(cuid())
  name          String
  type          ReportType
  parameters    String
  schedule      String?
  isActive      Boolean           @default(true)
  lastRun       DateTime?
  nextRun       DateTime?
  createdBy     String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  executions    ReportExecution[] @relation("Report")
  createdByUser User              @relation(fields: [createdBy], references: [id])

  @@index([type])
  @@index([isActive])
  @@index([nextRun])
}

model ReportExecution {
  id          String          @id @default(cuid())
  reportId    String
  status      ExecutionStatus
  startedAt   DateTime        @default(now())
  completedAt DateTime?
  result      String?
  error       String?
  filePath    String?
  report      StockReport     @relation("Report", fields: [reportId], references: [id])

  @@index([reportId])
  @@index([status])
  @@index([startedAt])
}

model StockIntegration {
  id            String          @id @default(cuid())
  name          String
  type          IntegrationType
  config        String
  isActive      Boolean         @default(true)
  lastSync      DateTime?
  syncStatus    SyncStatus      @default(PENDING)
  errorCount    Int             @default(0)
  lastError     String?
  createdBy     String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  createdByUser User            @relation(fields: [createdBy], references: [id])

  @@index([type])
  @@index([isActive])
  @@index([syncStatus])
}

enum Role {
  PDG
  REPRESENTANT
  CONCEPTEUR
  AUTEUR
  PARTENAIRE
  CLIENT
}

enum UserStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ProjectStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  ACCEPTED
  REJECTED
}

enum WorkStatus {
  DRAFT
  PENDING
  PUBLISHED
  REJECTED
  ON_SALE
  OUT_OF_STOCK
  DISCONTINUED
}

enum OrderStatus {
  PENDING
  VALIDATED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum StockMovementType {
  INBOUND
  OUTBOUND
  ADJUSTMENT
  TRANSFER
  DAMAGED
  EXPIRED
  PARTNER_ALLOCATION
  PARTNER_SALE
  PARTNER_RETURN
  DIRECT_SALE
  CORRECTION
  INVENTORY
}

enum SaleType {
  DIRECT
  ONLINE
  PARTNER
  SCHOOL
  BULK
}

enum DistributionType {
  SCHOOL
  LIBRARY
  PARTNER
  PROMOTION
  SAMPLE
}

enum AlertRuleType {
  STOCK_LOW
  STOCK_OUT
  SALES_THRESHOLD
  PRICE_CHANGE
  EXPIRY_WARNING
  CUSTOM
}

enum AlertPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AlertType {
  STOCK_LOW
  STOCK_OUT
  SALES_SPIKE
  PRICE_CHANGE
  EXPIRY_WARNING
  INTEGRATION_ERROR
  REPORT_FAILED
  CUSTOM
}

enum AlertSeverity {
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum ReportType {
  INVENTORY_SUMMARY
  SALES_ANALYSIS
  STOCK_MOVEMENTS
  ALERTS_SUMMARY
  CUSTOM
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum IntegrationType {
  ORDER_SYSTEM
  ACCOUNTING_SYSTEM
  WAREHOUSE_SYSTEM
  ECOMMERCE_PLATFORM
  CUSTOM
}

enum SyncStatus {
  PENDING
  SYNCING
  SUCCESS
  FAILED
  DISABLED
}
